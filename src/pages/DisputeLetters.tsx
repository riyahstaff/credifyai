
import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import DisputeLettersPage from '../components/disputes/letters/DisputeLettersPage';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/auth';

const DisputeLetters = () => {
  const { toast } = useToast();
  const location = useLocation();
  const navigate = useNavigate();
  const { profile, user } = useAuth();
  const [lettersLoaded, setLettersLoaded] = useState(false);
  
  // Effect to load letters on mount - with proper dependency array
  useEffect(() => {
    console.log("DisputeLetters page: User auth state:", user ? "Logged in" : "Not logged in");
    
    // Store profile data in localStorage for letter generation if not already done in AuthProvider
    if (profile) {
      localStorage.setItem('userProfile', JSON.stringify(profile));
      
      if (profile.full_name) {
        localStorage.setItem('userName', profile.full_name);
      }
    }
    
    // Check for letter data
    const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
    const generatedLetters = sessionStorage.getItem('generatedDisputeLetters');
    
    // Log current state for debugging
    console.log("[DisputeLetters] Checking for letter flags");
    console.log("[DisputeLetters] pendingLetter:", pendingLetter ? "Present" : "Not present");
    console.log("[DisputeLetters] generatedLetters:", generatedLetters ? "Present" : "Not present");
    
    let validLetters = false;
    
    if (pendingLetter) {
      try {
        const letterObj = JSON.parse(pendingLetter);
        if (letterObj && letterObj.content && letterObj.content.length > 0) {
          validLetters = true;
          console.log("[DisputeLetters] Letter content found, length:", letterObj.content.length);
          
          if (letterObj.content.includes("Sample dispute letter content") || 
              letterObj.content.length < 100) {
            console.log("[DisputeLetters] Found placeholder content, regenerating letter");
            toast({
              title: "Regenerating Letter",
              description: "The previous letter contained placeholder content. Generating a proper letter now.",
            });
            
            setTimeout(() => {
              navigate('/upload-report');
            }, 2000);
            return;
          }
        } else {
          console.warn("[DisputeLetters] Found letter with invalid/placeholder content");
        }
      } catch (e) {
        console.error("[DisputeLetters] Error parsing letter:", e);
      }
    }
    
    if (generatedLetters) {
      try {
        const lettersArray = JSON.parse(generatedLetters);
        if (Array.isArray(lettersArray) && lettersArray.length > 0) {
          validLetters = true;
          console.log("[DisputeLetters] Found valid generated letters array:", lettersArray.length);
        }
      } catch (e) {
        console.error("[DisputeLetters] Error parsing generated letters:", e);
      }
    }
    
    if (validLetters) {
      console.log("[DisputeLetters] Valid letters found in storage");
      setLettersLoaded(true);
      
      // Set a flag to force refresh in component, but don't do it repeatedly
      if (sessionStorage.getItem('forceLettersReload') !== 'done') {
        sessionStorage.setItem('forceLettersReload', 'done');
      }
      
      // Also ensure auto-generated flag is set
      sessionStorage.setItem('autoGeneratedLetter', 'true');
    } 
    else if (!lettersLoaded && sessionStorage.getItem('autoGeneratedLetter') === 'true' && !sessionStorage.getItem('redirectInProgress')) {
      console.log("[DisputeLetters] Auto-generated flag is true but no valid letters found");
      
      toast({
        title: "Letter Access Issue",
        description: "Unable to load dispute letters. Redirecting to upload page to try again.",
      });
      
      // Set a flag to prevent multiple redirects
      sessionStorage.setItem('redirectInProgress', 'true');
      
      setTimeout(() => {
        sessionStorage.removeItem('redirectInProgress');
        navigate('/upload-report');
      }, 1500);
    }
    
    // Clean up any navigation flags from previous attempts
    return () => {
      sessionStorage.removeItem('navigationInProgress');
      sessionStorage.removeItem('redirectInProgress');
    };
  }, [toast, profile, navigate, user, lettersLoaded]);

  return (
    <DisputeLettersPage testMode={false} requirePayment={true} />
  );
};

export default DisputeLetters;
