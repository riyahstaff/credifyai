
import React, { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import DisputeLettersPage from '../components/disputes/letters/DisputeLettersPage';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/auth';
import { supabase } from '@/integrations/supabase/client';
import { generateAutomaticDisputeLetter } from '@/components/ai/services/disputes/automaticLetterGenerator';

const DisputeLetters = () => {
  const { toast } = useToast();
  const location = useLocation();
  const navigate = useNavigate();
  const { profile, user } = useAuth();
  const [lettersLoaded, setLettersLoaded] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  
  // Effect to load letters on mount - with proper dependency array
  useEffect(() => {
    console.log("DisputeLetters page: User auth state:", user ? "Logged in" : "Not logged in");
    
    const loadLetters = async () => {
      // Start the loading process
      setIsLoading(true);
      
      // Check for force letter generation flag
      const forceGeneration = sessionStorage.getItem('forceLetterGeneration') === 'true';
      if (forceGeneration) {
        console.log("Force letter generation flag detected");
        sessionStorage.removeItem('forceLetterGeneration');
        await generateLetterFromStoredReport();
      }
      
      // First check if we already have letters in session storage
      const sessionLetters = sessionStorage.getItem('generatedDisputeLetters');
      const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
      const autoLetter = sessionStorage.getItem('autoGeneratedLetter');
      
      console.log("DisputeLetters page found in storage:", {
        generatedLetters: sessionLetters ? "present" : "missing",
        pendingLetter: pendingLetter ? "present" : "missing",
        autoLetter: autoLetter ? "present" : "missing"
      });
      
      if (sessionLetters) {
        console.log("[DisputeLetters] Found letters in session storage");
        setLettersLoaded(true);
        setIsLoading(false);
        return;
      }
      
      // Store profile data in localStorage for letter generation if not already done in AuthProvider
      if (profile) {
        localStorage.setItem('userProfile', JSON.stringify(profile));
        
        if (profile.full_name) {
          localStorage.setItem('userName', profile.full_name);
        }
      }
      
      // Force completion of loading after 3 seconds max to prevent permanent stuck state
      setTimeout(() => {
        if (isLoading) {
          console.log("[DisputeLetters] Forcing loading to complete after timeout");
          setIsLoading(false);
          
          // Check if we need to generate a fallback letter as a last resort
          const needsFallback = !sessionStorage.getItem('generatedDisputeLetters') && 
                              !sessionStorage.getItem('pendingDisputeLetter') && 
                              !sessionStorage.getItem('autoGeneratedLetter');
          
          if (needsFallback) {
            console.log("[DisputeLetters] No letters found, generating fallback letter");
            generateFallbackLetter();
          }
        }
      }, 3000);
      
      // Try to get letters from the backend only if we don't have them in session storage
      if (user) {
        try {
          console.log("[DisputeLetters] Fetching letters from backend");
          const { data: backendLetters, error } = await supabase
            .from('dispute_letters')
            .select('*')
            .eq('userId', user.id)
            .order('createdAt', { ascending: false })
            .limit(10);
            
          if (error) {
            throw error;
          }
            
          if (backendLetters && backendLetters.length > 0) {
            console.log(`[DisputeLetters] Found ${backendLetters.length} letters in backend`);
            sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(backendLetters));
            setLettersLoaded(true);
          } else {
            console.log("[DisputeLetters] No letters found in backend");
            // Check for pendingLetter as last resort
            checkPendingLetter();
          }
        } catch (error) {
          console.error("[DisputeLetters] Error fetching backend letters:", error);
          // Check for pendingLetter as fallback
          checkPendingLetter();
        }
      } else {
        // No user logged in, check for pendingLetter as fallback
        checkPendingLetter();
      }
      
      // Always complete loading even if we don't find any letters
      setIsLoading(false);
    };
    
    const checkPendingLetter = () => {
      // Check for any type of letter data as fallback
      const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
      const autoLetter = sessionStorage.getItem('autoGeneratedLetter');
      const letterToUse = autoLetter || pendingLetter;
      
      // Log current state for debugging
      console.log("[DisputeLetters] Checking for any letter data");
      console.log("[DisputeLetters] Letter data:", letterToUse ? "Present" : "Not present");
      
      if (letterToUse) {
        try {
          const letterObj = JSON.parse(letterToUse);
          if (letterObj && letterObj.content && letterObj.content.length > 0) {
            console.log("[DisputeLetters] Letter content found, length:", letterObj.content.length);
            
            if (letterObj.content.includes("Sample dispute letter content") || 
                letterObj.content.length < 100) {
              console.log("[DisputeLetters] Found placeholder content, regenerating letter");
              toast({
                title: "Regenerating Letter",
                description: "The previous letter contained placeholder content. Generating a proper letter now.",
              });
              
              generateLetterFromStoredReport();
              return;
            }
            
            // Convert letter to format expected by DisputeLettersPage
            const letters = [{
              ...letterObj,
              id: letterObj.id || Date.now(),
              title: letterObj.title || "Credit Report Dispute",
              createdAt: letterObj.createdAt || new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
              status: letterObj.status || "ready"
            }];
            
            // Store in session storage
            sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(letters));
            setLettersLoaded(true);
          } else {
            generateFallbackLetter();
          }
        } catch (e) {
          console.error("[DisputeLetters] Error parsing letter:", e);
          generateFallbackLetter();
        }
      } else {
        console.log("[DisputeLetters] No letter data found in storage");
        generateLetterFromStoredReport();
      }
    };
    
    // Generate letter from stored report if available
    const generateLetterFromStoredReport = async () => {
      try {
        // Check if we have report data
        const reportData = sessionStorage.getItem('creditReportData') || localStorage.getItem('creditReportData');
        
        if (reportData) {
          console.log("[DisputeLetters] Found stored report data, generating letter");
          
          const parsedReportData = JSON.parse(reportData);
          const targetAccount = JSON.parse(sessionStorage.getItem('disputeTargetAccount') || 
                                           localStorage.getItem('disputeTargetAccount') || 'null');
          
          // Extract user info
          const userInfo = {
            name: localStorage.getItem('userName') || profile?.full_name || '[YOUR NAME]',
            address: localStorage.getItem('userAddress') || '',
            city: localStorage.getItem('userCity') || '',
            state: localStorage.getItem('userState') || '',
            zip: localStorage.getItem('userZip') || ''
          };
          
          const letterContent = await generateAutomaticDisputeLetter(
            parsedReportData,
            targetAccount?.accountName,
            userInfo
          );
          
          if (letterContent && letterContent.length > 100) {
            console.log("[DisputeLetters] Successfully generated letter from stored report");
            
            // Force a page refresh to show the newly generated letter
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            console.log("[DisputeLetters] Failed to generate letter, using fallback");
            generateFallbackLetter();
          }
        } else {
          console.log("[DisputeLetters] No stored report data found");
          generateFallbackLetter();
        }
      } catch (error) {
        console.error("[DisputeLetters] Error generating letter from stored report:", error);
        generateFallbackLetter();
      }
    };
    
    // Generate a simple fallback letter as last resort
    const generateFallbackLetter = () => {
      console.log("[DisputeLetters] Generating fallback letter");
      
      const userInfo = {
        name: localStorage.getItem('userName') || profile?.full_name || '[YOUR NAME]',
        address: localStorage.getItem('userAddress') || '',
        city: localStorage.getItem('userCity') || '',
        state: localStorage.getItem('userState') || '',
        zip: localStorage.getItem('userZip') || ''
      };
      
      const bureau = "Credit Bureau";
      const letterDate = new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
      
      const letterContent = `${userInfo.name}
${userInfo.address ? userInfo.address + '\n' : ''}${userInfo.city ? userInfo.city + ', ' : ''}${userInfo.state || ''} ${userInfo.zip || ''}

${letterDate}

${bureau}
P.O. Box 4500
Allen, TX 75013

RE: Dispute of Inaccurate Information in Credit Report

To Whom It May Concern:

I am writing to dispute information in my credit report that I believe to be inaccurate. After reviewing my credit report, I have identified several discrepancies that require investigation.

Please conduct a thorough investigation of all items I am disputing, as required by the Fair Credit Reporting Act. If you cannot verify this information, please remove it from my credit report.

I understand that according to the Fair Credit Reporting Act, you are required to forward all relevant information to the information provider and to respond to my dispute within 30 days of receipt.

Thank you for your prompt attention to this matter.

Sincerely,

${userInfo.name}`;
      
      const fallbackLetter = {
        id: Date.now(),
        title: "General Credit Report Dispute",
        bureau: bureau,
        recipient: bureau,
        accountName: "Multiple Accounts",
        accountNumber: "",
        content: letterContent,
        letterContent: letterContent,
        bureaus: [bureau],
        createdAt: letterDate,
        status: "ready",
        errorType: "Data Inaccuracy"
      };
      
      // Store the fallback letter
      sessionStorage.setItem('generatedDisputeLetters', JSON.stringify([fallbackLetter]));
      sessionStorage.setItem('autoGeneratedLetter', JSON.stringify(fallbackLetter));
      
      console.log("[DisputeLetters] Fallback letter generated and stored");
      toast({
        title: "Dispute Letter Created",
        description: "A general dispute letter has been generated for you to review.",
      });
      
      setLettersLoaded(true);
      
      // Force a page refresh to show the fallback letter
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    };
    
    loadLetters();
    
    // Clean up any navigation flags from previous attempts
    return () => {
      sessionStorage.removeItem('navigationInProgress');
      sessionStorage.removeItem('redirectInProgress');
    };
  }, [toast, profile, navigate, user]);
  
  // If still loading, show loading state
  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-t-blue-500 border-blue-200 rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600 dark:text-gray-300">Loading your dispute letters...</p>
        </div>
      </div>
    );
  }

  return (
    <DisputeLettersPage testMode={false} requirePayment={true} />
  );
};

export default DisputeLetters;
