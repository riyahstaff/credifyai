
import React, { useEffect } from 'react';
import Navbar from '../components/layout/Navbar';
import Footer from '../components/layout/Footer';
import ReportUploadInfo from '@/components/disputes/uploader/ReportUploadInfo';
import UploadReportHeader from '@/components/disputes/uploader/UploadReportHeader';
import UploadReportContent from '@/components/disputes/uploader/UploadReportContent';
import { useReportUpload } from '@/hooks/useReportUpload';
import { Button } from '@/components/ui/button';
import { useNavigate } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { 
  verifyLetterStorage, 
  forceNavigateToLetters, 
  storeLetterInStorage 
} from '@/components/disputes/uploader/utils/bureauUtils';

const UploadReport = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const {
    fileUploaded,
    analyzing,
    analyzed,
    fileName,
    fileSize,
    reportData,
    uploadedFile,
    issues,
    letterGenerated,
    analysisError,
    resetUpload,
    startAnalysis,
    handleGenerateDispute,
    onAnalysisComplete,
    handleFile,
    clearPendingLetters
  } = useReportUpload();

  // Check for pending letters but don't auto-redirect
  useEffect(() => {
    // Verify if we have letters in storage
    const hasLetters = verifyLetterStorage();
    
    if (hasLetters) {
      console.log("Found pending dispute letters in storage, but staying on upload page");
    }
  }, []);

  // Track letter generation status and navigate if needed
  useEffect(() => {
    if (letterGenerated) {
      console.log("Letter generated flag is true, checking storage");
      const hasLetters = verifyLetterStorage();
      
      if (hasLetters) {
        console.log("Letters found in storage after generation, preparing to navigate");
        toast({
          title: "Dispute Letter Generated",
          description: "Your dispute letter has been created successfully. Navigating to letters page...",
          duration: 3000,
        });
        
        const timer = setTimeout(() => {
          forceNavigateToLetters(navigate);
        }, 1500);
        
        return () => clearTimeout(timer);
      } else {
        console.error("Letter generated flag is true but no letters found in storage");
        toast({
          title: "Letter Generation Issue",
          description: "Your letter was generated but we couldn't find it in storage. Please try again.",
          variant: "destructive",
        });
      }
    }
  }, [letterGenerated, navigate, toast]);

  const handleContinueToLetters = () => {
    // Make sure the auto generated flag is set before navigating
    sessionStorage.setItem('autoGeneratedLetter', 'true');
    sessionStorage.setItem('forceLettersReload', 'true');
    console.log("Setting required flags before navigating to letters page");
    
    // Force a reload when navigating
    forceNavigateToLetters(navigate);
  };

  const handleStartNewReport = () => {
    // Clear any existing letters and reset the upload state
    clearPendingLetters();
    resetUpload();
    toast({
      title: "Previous letters cleared",
      description: "You can now upload a new credit report.",
    });
  };

  // Check if there are pending letters
  const hasPendingLetters = verifyLetterStorage();

  // Custom dispute generation handler with extra verification
  const handleDisputeGeneration = async (selectedIssue: any) => {
    try {
      console.log("Starting dispute generation with extra verification");
      
      // Call the original handler
      const result = await handleGenerateDispute(selectedIssue);
      
      // Verify result and ensure storage
      if (result && result.disputeData) {
        console.log("Dispute generation successful, storing letter");
        storeLetterInStorage(result.disputeData);
        
        // Set a timeout before navigating to ensure storage is complete
        setTimeout(() => {
          const hasLetters = verifyLetterStorage();
          if (hasLetters) {
            console.log("Letter verified in storage, navigating to dispute letters page");
            forceNavigateToLetters(navigate);
          } else {
            console.error("Failed to verify letter in storage after generation");
            toast({
              title: "Storage Error",
              description: "We had trouble saving your letter. Please try again.",
              variant: "destructive",
            });
          }
        }, 1000);
      } else {
        console.error("Dispute generation returned invalid result");
        toast({
          title: "Generation Failed",
          description: "There was a problem generating your dispute letter. Please try again.",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Error in enhanced dispute generation:", error);
      toast({
        title: "Generation Error",
        description: "An error occurred while generating your dispute letter.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="min-h-screen flex flex-col">
      <Navbar />
      
      <main className="flex-grow pt-24 pb-20">
        <div className="container mx-auto px-4 md:px-6">
          <div className="max-w-4xl mx-auto">
            {/* Page Header */}
            <UploadReportHeader />
            
            {/* Pending Letters Alert */}
            {hasPendingLetters && !fileUploaded && (
              <div className="bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800/30 rounded-lg p-4 mb-6">
                <h3 className="text-amber-800 dark:text-amber-300 font-medium text-lg mb-2">
                  You have pending dispute letters
                </h3>
                <p className="text-amber-700 dark:text-amber-400 mb-4">
                  We detected previously generated dispute letters. You can view them or start a new report analysis.
                </p>
                <div className="flex flex-wrap gap-3">
                  <Button 
                    onClick={handleContinueToLetters}
                    className="bg-amber-600 hover:bg-amber-700 text-white"
                  >
                    Go to Dispute Letters
                  </Button>
                  <Button 
                    onClick={handleStartNewReport}
                    variant="outline"
                    className="border-amber-600 text-amber-700 hover:bg-amber-50"
                  >
                    Start New Report Analysis
                  </Button>
                </div>
              </div>
            )}
            
            {/* Upload Container */}
            <UploadReportContent
              fileUploaded={fileUploaded}
              analyzing={analyzing}
              analyzed={analyzed}
              fileName={fileName}
              fileSize={fileSize}
              reportData={reportData}
              uploadedFile={uploadedFile}
              issues={issues}
              letterGenerated={letterGenerated}
              analysisError={analysisError}
              onResetUpload={resetUpload}
              onStartAnalysis={startAnalysis}
              onGenerateDispute={handleDisputeGeneration} // Use enhanced handler
              onAnalysisComplete={onAnalysisComplete}
              onFileSelected={handleFile}
            />
            
            {/* Information Sections */}
            <ReportUploadInfo />
          </div>
        </div>
      </main>
      
      <Footer />
    </div>
  );
};

export default UploadReport;
