
import { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { CreditReportData, CreditReportAccount } from '@/utils/creditReportParser';
import { handleAnalysisComplete } from '@/components/disputes/uploader/AnalysisProcessor';
import { formatFileSize } from '@/utils/fileUtils';

export const useReportUpload = () => {
  const toast = useToast();
  const navigate = useNavigate();
  const [fileUploaded, setFileUploaded] = useState(false);
  const [analyzing, setAnalyzing] = useState(false);
  const [analyzed, setAnalyzed] = useState(false);
  const [fileName, setFileName] = useState('');
  const [fileSize, setFileSize] = useState('');
  const [reportData, setReportData] = useState<CreditReportData | null>(null);
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [issues, setIssues] = useState<Array<{
    type: string;
    title: string;
    description: string;
    impact: 'High Impact' | 'Critical Impact' | 'Medium Impact';
    impactColor: string;
    account?: CreditReportAccount;
    laws: string[];
  }>>([]);
  
  const [letterGenerated, setLetterGenerated] = useState(false);
  const [analysisError, setAnalysisError] = useState<string | null>(null);
  
  // Add a ref to prevent state from being reset during animation
  const analysisInProgress = useRef(false);
  
  // Add a ref to track if analysis has been completed
  const analysisCompleted = useRef(false);
  
  // Check if there's a pending letter when the component mounts
  useEffect(() => {
    const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
    const autoGenerated = sessionStorage.getItem('autoGeneratedLetter');
    
    if (pendingLetter && autoGenerated) {
      console.log("Found pending dispute letter in session storage");
    }
  }, []);

  // Listen for console logs that indicate navigation should happen
  useEffect(() => {
    // Create a MutationObserver to watch for the special console log
    const originalConsoleLog = console.log;
    console.log = function() {
      // Call the original console.log
      originalConsoleLog.apply(console, arguments);
      
      // Check if this is our special navigation trigger message
      if (arguments[0] === "ANALYSIS_COMPLETE_READY_FOR_NAVIGATION") {
        originalConsoleLog("Detected navigation trigger - redirecting to dispute letters page");
        setTimeout(() => {
          navigate('/dispute-letters');
        }, 500);
      }
    };
    
    return () => {
      // Restore original console.log when component unmounts
      console.log = originalConsoleLog;
    };
  }, [navigate]);

  // Add an effect to check for letter generation
  useEffect(() => {
    if (letterGenerated && sessionStorage.getItem('pendingDisputeLetter')) {
      console.log("Letter has been generated, navigating to dispute letters page");
      const timer = setTimeout(() => {
        navigate('/dispute-letters');
      }, 1000);
      
      return () => clearTimeout(timer);
    }
  }, [letterGenerated, navigate]);

  const handleFile = (file: File) => {
    // Reset analysis state when a new file is uploaded
    analysisCompleted.current = false;
    
    // Update file info
    setFileName(file.name);
    setFileSize(formatFileSize(file.size));
    setFileUploaded(true);
    setUploadedFile(file);
    setAnalyzed(false);
    setAnalyzing(false);
    setAnalysisError(null);
    setLetterGenerated(false);
  };

  const onAnalysisComplete = async () => {
    console.log("Analysis complete callback triggered in UploadReport");
    
    // Prevent duplicate analysis
    if (analysisCompleted.current) {
      console.log("Analysis already completed, ignoring callback");
      return;
    }
    
    // Mark analysis as completed to prevent duplicate processing
    analysisCompleted.current = true;
    
    try {
      await handleAnalysisComplete({
        uploadedFile,
        setReportData,
        setIssues,
        setLetterGenerated,
        setAnalysisError,
        setAnalyzing,
        setAnalyzed,
        toast
      });
      
      // Check if a letter was generated and navigate if needed
      if (sessionStorage.getItem('autoGeneratedLetter') === 'true' && 
          sessionStorage.getItem('pendingDisputeLetter')) {
        console.log("Auto-generated letter detected, navigating to dispute letters page");
        navigate('/dispute-letters');
      }
    } catch (error) {
      console.error("Error in analysis completion:", error);
      setAnalyzing(false);
      setAnalyzed(true); // Ensure we move to the analyzed state even on error
      setAnalysisError(error instanceof Error ? error.message : "An unexpected error occurred");
    }
  };

  const resetUpload = () => {
    setFileUploaded(false);
    setAnalyzed(false);
    setAnalyzing(false);
    setReportData(null);
    setIssues([]);
    setUploadedFile(null);
    setLetterGenerated(false);
    setAnalysisError(null);
    analysisInProgress.current = false;
    analysisCompleted.current = false;
  };

  // Add a new function to clear pending letters
  const clearPendingLetters = () => {
    // Remove all stored letter data
    sessionStorage.removeItem('pendingDisputeLetter');
    sessionStorage.removeItem('autoGeneratedLetter');
    sessionStorage.removeItem('generatedDisputeLetters');
    sessionStorage.removeItem('creditReportData');
    sessionStorage.removeItem('selectedAccount');
    
    console.log("Cleared all pending dispute letters and report data");
  };

  const handleGenerateDispute = (account?: CreditReportAccount) => {
    // Store the report data in session storage to use in the dispute letters page
    if (reportData) {
      sessionStorage.setItem('creditReportData', JSON.stringify(reportData));
      
      // If account is provided, also store that
      if (account) {
        sessionStorage.setItem('selectedAccount', JSON.stringify(account));
      }
      
      // Navigate to dispute letters page
      navigate('/dispute-letters');
    }
  };

  const startAnalysis = async () => {
    if (!fileUploaded || !uploadedFile) {
      toast.toast({
        title: "No file found",
        description: "Please upload a credit report file first.",
        variant: "destructive",
      });
      return;
    }
    
    // Reset analysis completion state
    analysisCompleted.current = false;
    
    console.log("Starting analysis - setting analyzing state to true");
    setAnalyzing(true);
    setAnalysisError(null);
    
    // Trigger analysis immediately
    onAnalysisComplete();
  };

  // Add debug logging for state changes
  console.log("UploadReport state:", { 
    fileUploaded, 
    analyzing, 
    analyzed, 
    letterGenerated,
    analysisInProgress: analysisInProgress.current,
    analysisCompleted: analysisCompleted.current,
  });

  return {
    fileUploaded,
    analyzing,
    analyzed,
    fileName,
    fileSize,
    reportData,
    uploadedFile,
    issues,
    letterGenerated,
    analysisError,
    resetUpload,
    startAnalysis,
    handleGenerateDispute,
    onAnalysisComplete,
    handleFile,
    clearPendingLetters
  };
};
