
import { MutableRefObject, useCallback } from 'react';
import { CreditReportData, IdentifiedIssue } from '@/utils/creditReport/types';
import { handleAnalysisComplete } from '@/components/disputes/uploader/handlers/analysisHandler';
import { useToast } from '@/hooks/use-toast';

// Helper function to yield control back to the browser
const yieldToMain = () => new Promise(resolve => setTimeout(resolve, 0));

export const useReportAnalysis = (
  uploadedFile: File | null,
  setReportData: (data: CreditReportData) => void,
  setIssues: (issues: IdentifiedIssue[]) => void,
  setLetterGenerated: (generated: boolean) => void,
  setAnalysisError: (error: string | null) => void,
  setAnalyzing: (analyzing: boolean) => void,
  setAnalyzed: (analyzed: boolean) => void,
  analysisCompleted: MutableRefObject<boolean>
) => {
  const { toast } = useToast();
  
  // Enhanced startAnalysis with better handling to prevent browser unresponsive errors
  const startAnalysis = useCallback(async () => {
    if (uploadedFile) {
      console.log("Starting analysis of uploaded file:", uploadedFile.name);
      setAnalyzing(true);
      setAnalysisError(null);
      
      // Clear any existing letter data to prevent confusion
      sessionStorage.removeItem('pendingDisputeLetter');
      sessionStorage.removeItem('generatedDisputeLetters');
      sessionStorage.removeItem('autoGeneratedLetter');
      sessionStorage.removeItem('shouldNavigateToLetters');
      
      // Create a compatible toast object for the handler
      const toastObject = {
        toast: toast,
        dismiss: () => {},
        toasts: []
      };
      
      try {
        // Use setTimeout to allow the browser to update UI before starting analysis
        setTimeout(async () => {
          try {
            // Yield control once before starting CPU-intensive task
            await yieldToMain();
            
            // Set a backup timeout to force completion if the analysis gets stuck
            const analysisBackupTimeout = setTimeout(() => {
              if (!analysisCompleted.current) {
                console.log("Analysis backup timeout reached - forcing completion");
                onAnalysisComplete();
              }
            }, 10000); // Reduced from 15s to 10s for even faster timeout
            
            // First attempt: Try local analysis directly, skipping the external API
            console.log("Using local analysis for credit report processing");
            try {
              // Import needed modules for local processing
              const { parseReportContent } = await import('@/utils/creditReport/parser');
              const { extractTextFromPDF } = await import('@/utils/creditReport/extractors/pdfExtractor');
              const { identifyIssues } = await import('@/utils/reportAnalysis/issueIdentification');
              
              // Extract text from file based on its type
              let textContent = '';
              if (uploadedFile.type === 'application/pdf' || uploadedFile.name.toLowerCase().endsWith('.pdf')) {
                console.log("Extracting text from PDF file...");
                textContent = await extractTextFromPDF(uploadedFile);
              } else {
                console.log("Reading text from non-PDF file...");
                textContent = await uploadedFile.text();
              }
              
              if (!textContent || textContent.length < 50) {
                throw new Error("Failed to extract sufficient text from the file");
              }
              
              console.log(`Successfully extracted ${textContent.length} characters from file`);
              
              // Parse content
              const isPdf = uploadedFile.type === 'application/pdf' || uploadedFile.name.toLowerCase().endsWith('.pdf');
              console.log("Parsing report content...");
              const reportData = parseReportContent(textContent, isPdf);
              
              // Find issues
              console.log("Identifying issues in report...");
              const issues = identifyIssues(reportData);
              
              console.log(`Found ${issues.length} issues in the report`);
              
              // Update state with results
              setReportData(reportData);
              setIssues(issues);
              
              toast({
                title: "Report Analysis Complete",
                description: `Analyzed your report and found ${issues.length} potential issues.`,
                variant: "default"
              });
              
              // Complete the analysis
              onAnalysisComplete();
              
              // Only try the external API as a backup if the local analysis doesn't find enough issues
              if (issues.length < 3) {
                console.log("Local analysis found few issues, attempting external API as enhancement...");
                
                // Try external API as enhancement but don't wait for it
                try {
                  handleAnalysisComplete({
                    uploadedFile,
                    setReportData,
                    setIssues,
                    setLetterGenerated,
                    setAnalysisError,
                    setAnalyzing,
                    setAnalyzed,
                    toast: toastObject,
                    testMode: false
                  }).then(() => {
                    console.log("External API analysis completed as enhancement");
                  }).catch(err => {
                    console.log("External API enhancement failed, continuing with local results");
                  });
                } catch (err) {
                  // Ignore errors from external API since we already have local results
                  console.log("Error in external API enhancement attempt:", err);
                }
              }
            } catch (localError) {
              console.error("Error in local analysis, trying external API:", localError);
              
              // Second attempt: Try external API if local analysis fails
              try {
                await handleAnalysisComplete({
                  uploadedFile,
                  setReportData,
                  setIssues,
                  setLetterGenerated,
                  setAnalysisError,
                  setAnalyzing,
                  setAnalyzed,
                  toast: toastObject,
                  testMode: false
                });
              } catch (apiError) {
                console.error("Both local and external analysis failed:", apiError);
                throw new Error("Failed to analyze report with both local and external methods");
              }
            }
            
            clearTimeout(analysisBackupTimeout);
            
            // Store flag for letter generation after analysis
            sessionStorage.setItem('reportAnalyzed', 'true');
            sessionStorage.setItem('reportReadyForLetters', 'true');
          } catch (err) {
            console.error("Error in analysis:", err);
            setAnalysisError(err instanceof Error ? err.message : "Unknown error occurred");
            setAnalyzing(false);
            
            toast({
              title: "Analysis Error",
              description: err instanceof Error ? err.message : "Unknown error analyzing your report",
              variant: "destructive"
            });
          }
        }, 100);
      } catch (error) {
        console.error("Error initiating analysis:", error);
        setAnalysisError(error instanceof Error ? error.message : "Unknown error occurred");
        setAnalyzing(false);
        
        toast({
          title: "Analysis Error",
          description: "Failed to start credit report analysis",
          variant: "destructive"
        });
      }
    } else {
      console.error("Attempted to start analysis without an uploaded file");
      setAnalysisError("No file was uploaded");
      
      toast({
        title: "Missing File",
        description: "Please upload a credit report file first",
        variant: "destructive"
      });
    }
  }, [uploadedFile, setReportData, setIssues, setLetterGenerated, setAnalysisError, setAnalyzing, setAnalyzed, toast, analysisCompleted]);

  const onAnalysisComplete = useCallback(() => {
    // Mark analysis as complete
    console.log("Analysis marked as complete");
    analysisCompleted.current = true;
    setAnalyzed(true);
    setAnalyzing(false);
    
    // Set flag for automatic letter generation
    sessionStorage.setItem('analysisComplete', 'true');
    sessionStorage.setItem('reportReadyForLetters', 'true');
  }, [setAnalyzed, setAnalyzing, analysisCompleted]);

  return {
    onAnalysisComplete,
    startAnalysis
  };
};
