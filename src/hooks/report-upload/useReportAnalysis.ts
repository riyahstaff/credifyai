
import { useEffect } from 'react';
import { handleAnalysisComplete } from '@/components/disputes/uploader/AnalysisProcessor';
import { useToast } from '@/hooks/use-toast';
import { CreditReportAccount } from '@/utils/creditReportParser';

export const useReportAnalysis = (
  uploadedFile: File | null,
  setReportData: any,
  setIssues: any,
  setLetterGenerated: any,
  setAnalysisError: any,
  setAnalyzing: any,
  setAnalyzed: any,
  analysisCompleted: React.MutableRefObject<boolean>
) => {
  const toast = useToast();

  // Monitor for auto-generated letters
  useEffect(() => {
    const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
    const autoGenerated = sessionStorage.getItem('autoGeneratedLetter');
    
    if (pendingLetter && autoGenerated) {
      console.log("Found pending dispute letter in session storage");
    }
  }, []);

  // Handle analysis completion
  const onAnalysisComplete = async () => {
    console.log("Analysis complete callback triggered in UploadReport");
    
    // Prevent duplicate analysis
    if (analysisCompleted.current) {
      console.log("Analysis already completed, ignoring callback");
      return;
    }
    
    // Mark analysis as completed to prevent duplicate processing
    analysisCompleted.current = true;
    
    try {
      await handleAnalysisComplete({
        uploadedFile,
        setReportData,
        setIssues,
        setLetterGenerated,
        setAnalysisError,
        setAnalyzing,
        setAnalyzed,
        toast
      });
      
      // Check if a letter was generated and navigate if needed
      if (sessionStorage.getItem('autoGeneratedLetter') === 'true' && 
          sessionStorage.getItem('pendingDisputeLetter')) {
        console.log("Auto-generated letter detected, navigating to dispute letters page");
        console.log("ANALYSIS_COMPLETE_READY_FOR_NAVIGATION");
      }
    } catch (error) {
      console.error("Error in analysis completion:", error);
      setAnalyzing(false);
      setAnalyzed(true); // Ensure we move to the analyzed state even on error
      setAnalysisError(error instanceof Error ? error.message : "An unexpected error occurred");
    }
  };

  // Start the analysis process
  const startAnalysis = async () => {
    if (!uploadedFile) {
      toast.toast({
        title: "No file found",
        description: "Please upload a credit report file first.",
        variant: "destructive",
      });
      return;
    }
    
    // Reset analysis completion state
    analysisCompleted.current = false;
    
    console.log("Starting analysis - setting analyzing state to true");
    setAnalyzing(true);
    setAnalysisError(null);
    
    // Trigger analysis immediately
    onAnalysisComplete();
  };

  // Handle dispute generation
  const handleGenerateDispute = (account?: CreditReportAccount) => {
    // This function now just forwards to useReportStorage's storeForDispute
    // which will be composed in the main hook
  };

  return {
    onAnalysisComplete,
    startAnalysis,
    handleGenerateDispute
  };
};
