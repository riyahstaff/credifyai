
import { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';

export const useLetterManagement = () => {
  const navigate = useNavigate();
  const [hasPendingLetters, setHasPendingLetters] = useState(false);
  
  // Check for pending letters on mount
  useEffect(() => {
    checkForPendingLetters();
  }, []);
  
  // Function to check for pending letters in session storage
  const checkForPendingLetters = useCallback(() => {
    try {
      // Check for various letter storage keys
      const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
      const generatedLetters = sessionStorage.getItem('generatedDisputeLetters');
      const autoLetter = sessionStorage.getItem('autoGeneratedLetter');
      
      // Log what we found
      console.log("Checking for pending letters:", {
        pendingLetter: pendingLetter ? "present" : "missing",
        generatedLetters: generatedLetters ? "present" : "missing",
        autoLetter: autoLetter ? "present" : "missing"
      });
      
      // Set state based on presence of any letters
      const hasLetters = !!(pendingLetter || generatedLetters || autoLetter);
      setHasPendingLetters(hasLetters);
      
      return hasLetters;
    } catch (error) {
      console.error("Error checking for pending letters:", error);
      return false;
    }
  }, []);
  
  // Navigate to letters page to continue with existing letters
  const handleContinueToLetters = useCallback(() => {
    console.log("User chose to continue with existing letters");
    navigate('/dispute-letters');
  }, [navigate]);
  
  // Clear existing letters and start with new report
  const handleStartNewReport = useCallback(() => {
    try {
      console.log("User chose to start fresh - clearing existing letters");
      
      // Remove all letter storage keys
      sessionStorage.removeItem('pendingDisputeLetter');
      sessionStorage.removeItem('generatedDisputeLetters');
      sessionStorage.removeItem('autoGeneratedLetter');
      sessionStorage.removeItem('hasDisputeLetters');
      sessionStorage.removeItem('forceLettersReload');
      
      // Reset state
      setHasPendingLetters(false);
      
      // Check that clearing worked
      const stillHasLetters = checkForPendingLetters();
      if (stillHasLetters) {
        console.error("Failed to clear pending letters");
      } else {
        console.log("Successfully cleared all pending letters");
      }
    } catch (error) {
      console.error("Error clearing pending letters:", error);
    }
  }, [checkForPendingLetters]);
  
  return {
    hasPendingLetters,
    checkForPendingLetters,
    handleContinueToLetters,
    handleStartNewReport
  };
};
