import { CreditReportAccount, CreditReportData } from '@/utils/creditReportParser';
import { storeGeneratedLetters } from '@/components/disputes/uploader/utils/disputeLetterHelpers';

export const useReportStorage = () => {
  // Check for pending letters
  const checkPendingLetters = (): { hasPendingLetter: boolean, autoGenerated: boolean } => {
    const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
    const autoGenerated = sessionStorage.getItem('autoGeneratedLetter');
    
    return { 
      hasPendingLetter: !!pendingLetter, 
      autoGenerated: autoGenerated === 'true'
    };
  };

  // Clear all pending letters and report data
  const clearPendingLetters = () => {
    // Remove all stored letter data
    sessionStorage.removeItem('pendingDisputeLetter');
    sessionStorage.removeItem('autoGeneratedLetter');
    sessionStorage.removeItem('generatedDisputeLetters');
    sessionStorage.removeItem('creditReportData');
    sessionStorage.removeItem('selectedAccount');
    sessionStorage.removeItem('forceLettersReload');
    
    console.log("Cleared all pending dispute letters and report data");
  };

  // Store data for dispute generation
  const storeForDispute = (reportData: CreditReportData, account?: CreditReportAccount) => {
    console.log("Storing report data for dispute generation");
    
    try {
      // Clear any existing data first
      sessionStorage.removeItem('pendingDisputeLetter');
      sessionStorage.removeItem('generatedDisputeLetters');
      sessionStorage.removeItem('autoGeneratedLetter');
      
      // Store the report data
      sessionStorage.setItem('creditReportData', JSON.stringify(reportData));
      
      // If account is provided, also store that
      if (account) {
        sessionStorage.setItem('selectedAccount', JSON.stringify(account));
      }
      
      // Create a sample letter if none exists
      const sampleLetter = {
        id: Date.now(),
        title: account ? `Dispute for ${account.accountName}` : 'General Dispute Letter',
        bureau: account?.bureau || 'Experian',
        recipient: account?.bureau || 'Experian',
        accountName: account?.accountName || 'All Accounts',
        accountNumber: account?.accountNumber || '',
        errorType: 'Inaccurate Information',
        explanation: 'This information is not accurate and requires correction.',
        content: `
[CURRENT DATE]

${account?.bureau || 'Credit Bureau'}
[BUREAU ADDRESS]

RE: Dispute of Inaccurate Credit Information

To Whom It May Concern:

I am writing to dispute the following information in my credit report:

Account: ${account?.accountName || 'All accounts'}
Account Number: ${account?.accountNumber || '[Account Number]'}
Reason for Dispute: Inaccurate Information

This information is inaccurate because [explanation]. Under the Fair Credit Reporting Act, Section 611(a), you are required to conduct a reasonable investigation into this matter.

Please investigate this matter and correct or delete the disputed item as appropriate.

Sincerely,
[YOUR NAME]
        `,
        letterContent: '',
        status: 'draft',
        createdAt: new Date().toLocaleDateString('en-US', { 
          month: 'short', day: 'numeric', year: 'numeric' 
        }),
        bureaus: [account?.bureau || 'Experian'],
        laws: ["FCRA § 611"],
        timestamp: new Date().toISOString()
      };
      
      // Ensure both content fields are populated
      sampleLetter.letterContent = sampleLetter.content;
      
      // Store the letter
      storeGeneratedLetters([sampleLetter]);
      
      // Set flags
      sessionStorage.setItem('autoGeneratedLetter', 'true');
      sessionStorage.setItem('forceLettersReload', 'true');
      
      // Log storage status
      console.log("✓ Storage state after storeForDispute:");
      console.log("  - autoGeneratedLetter:", sessionStorage.getItem('autoGeneratedLetter'));
      console.log("  - pendingDisputeLetter exists:", !!sessionStorage.getItem('pendingDisputeLetter'));
      console.log("  - generatedDisputeLetters exists:", !!sessionStorage.getItem('generatedDisputeLetters'));
      console.log("  - forceLettersReload:", sessionStorage.getItem('forceLettersReload'));
      
      return true;
    } catch (error) {
      console.error("Error storing dispute data:", error);
      return false;
    }
  };

  return {
    checkPendingLetters,
    clearPendingLetters,
    storeForDispute
  };
};
