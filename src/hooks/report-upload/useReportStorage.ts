
import { useState, useCallback } from 'react';
import { CreditReportData, CreditReportAccount } from '@/utils/creditReport/types';

export const useReportStorage = () => {
  // Store report data for dispute generation
  const storeForDispute = useCallback((reportData: CreditReportData, targetAccount: CreditReportAccount | null): boolean => {
    try {
      console.log("Storing report data for dispute generation");
      
      // Store the full report data in localStorage
      localStorage.setItem('creditReportData', JSON.stringify(reportData));
      
      // Also store a copy in session storage
      try {
        sessionStorage.setItem('creditReportData', JSON.stringify(reportData));
      } catch (e) {
        console.warn("Could not store full report in session storage", e);
        // Store a minimal version
        const minimalData = {
          personalInfo: reportData.personalInfo,
          accounts: reportData.accounts?.slice(0, 3), 
          inquiries: reportData.inquiries?.slice(0, 3),
          bureaus: reportData.bureaus,
          primaryBureau: reportData.primaryBureau
        };
        sessionStorage.setItem('creditReportData', JSON.stringify(minimalData));
      }
      
      // Store the target account if provided
      if (targetAccount) {
        localStorage.setItem('disputeTargetAccount', JSON.stringify(targetAccount));
        sessionStorage.setItem('disputeTargetAccount', JSON.stringify(targetAccount));
        console.log("Target account stored:", targetAccount.accountName);
      } else {
        console.warn("No target account provided for dispute");
        // If report has accounts, store the first one as default target
        if (reportData.accounts && reportData.accounts.length > 0) {
          const defaultAccount = reportData.accounts[0];
          localStorage.setItem('disputeTargetAccount', JSON.stringify(defaultAccount));
          sessionStorage.setItem('disputeTargetAccount', JSON.stringify(defaultAccount));
          console.log("Using first account as default target:", defaultAccount.accountName);
        }
      }
      
      // Set a timestamp for when the data was stored
      const timestamp = Date.now().toString();
      localStorage.setItem('reportStorageTime', timestamp);
      sessionStorage.setItem('reportStorageTime', timestamp);
      
      // Set flags for letter generation
      sessionStorage.setItem('reportReadyForLetters', 'true');
      sessionStorage.setItem('forceLetterGeneration', 'true');
      sessionStorage.setItem('shouldNavigateToLetters', 'true');
      sessionStorage.setItem('reportAnalyzed', 'true');
      sessionStorage.setItem('analysisComplete', 'true');
      
      // Set account count flag to indicate the report has accounts
      if (reportData.accounts) {
        sessionStorage.setItem('reportAccountCount', reportData.accounts.length.toString());
      }
      
      console.log("Successfully stored report data for dispute generation");
      return true;
    } catch (error) {
      console.error("Error storing report data for dispute:", error);
      return false;
    }
  }, []);
  
  // Check for pending letters
  const checkPendingLetters = useCallback((): boolean => {
    // Check if there's a pending letter in any storage
    const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
    const generatedLetters = sessionStorage.getItem('generatedDisputeLetters');
    const autoLetter = sessionStorage.getItem('autoGeneratedLetter');
    
    console.log("Checking for pending letters:", {
      pendingLetter: pendingLetter ? "exists" : "missing",
      generatedLetters: generatedLetters ? "exists" : "missing",
      autoLetter: autoLetter ? "exists" : "missing"
    });
    
    return !!(pendingLetter || generatedLetters || autoLetter);
  }, []);
  
  // Clear stored report
  const clearStoredReport = useCallback(() => {
    // Clear report data
    localStorage.removeItem('creditReportData');
    localStorage.removeItem('disputeTargetAccount');
    localStorage.removeItem('reportStorageTime');
    
    // Clear session storage
    sessionStorage.removeItem('creditReportData');
    sessionStorage.removeItem('disputeTargetAccount');
    sessionStorage.removeItem('reportStorageTime');
    sessionStorage.removeItem('currentReportAnalysis');
    sessionStorage.removeItem('reportIssues');
    sessionStorage.removeItem('reportReadyForLetters');
    sessionStorage.removeItem('reportAccountCount');
    
    console.log("Cleared all stored report data");
  }, []);
  
  // Prepare report for letter generation (useful for manual trigger)
  const prepareForLetterGeneration = useCallback(() => {
    sessionStorage.setItem('reportReadyForLetters', 'true');
    sessionStorage.setItem('forceLetterGeneration', 'true');
    sessionStorage.setItem('shouldNavigateToLetters', 'true');
    sessionStorage.setItem('analysisComplete', 'true');
    
    console.log("Report prepared for letter generation, flags set");
    
    return checkPendingLetters();
  }, [checkPendingLetters]);
  
  return {
    storeForDispute,
    checkPendingLetters,
    clearStoredReport,
    prepareForLetterGeneration
  };
};
