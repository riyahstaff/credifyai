
import React, { useState } from 'react';
import { Brain, FileText, Sparkles } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { generateEnhancedDisputeLetter } from '@/lib/supabase/letterGenerator';

interface DisputeAgentProps {
  onGenerateDispute: (disputeData: any) => void;
}

const DisputeAgent: React.FC<DisputeAgentProps> = ({ onGenerateDispute }) => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isThinking, setIsThinking] = useState(false);
  
  const handleActivateAI = async () => {
    setIsThinking(true);
    
    // Notify the user that CLEO is analyzing
    toast({
      title: "CLEO AI activated",
      description: "CLEO is analyzing your credit report and generating dispute letters...",
      duration: 3000,
    });
    
    // Get report data from session storage
    const storedReportData = sessionStorage.getItem('creditReportData');
    
    if (storedReportData) {
      try {
        const reportData = JSON.parse(storedReportData);
        
        if (!reportData.accounts || reportData.accounts.length === 0) {
          toast({
            title: "No account data found",
            description: "Your credit report doesn't contain any account information for CLEO to dispute.",
            variant: "destructive",
            duration: 5000,
          });
          setIsThinking(false);
          return;
        }
        
        // Get user info from local storage or use placeholder
        const userInfo = {
          name: localStorage.getItem('userName') || "[YOUR NAME]",
          address: localStorage.getItem('userAddress') || "[YOUR ADDRESS]",
          city: localStorage.getItem('userCity') || "[CITY]",
          state: localStorage.getItem('userState') || "[STATE]",
          zip: localStorage.getItem('userZip') || "[ZIP]"
        };
        
        // Generate a dispute letter for EACH account or at least the first few
        const accountsToDispute = reportData.accounts.slice(0, 3); // Limit to first 3 accounts for now
        
        for (const account of accountsToDispute) {
          const bureau = account.bureau || "Experian"; // Default to Experian if no specific bureau found
          const errorType = "Inaccurate Information";
          const explanation = `I am disputing this ${account.accountName} account as it contains inaccurate information that requires investigation and correction.`;
          
          // Generate an enhanced dispute letter
          const letterContent = await generateEnhancedDisputeLetter(
            errorType,
            {
              accountName: account.accountName,
              accountNumber: account.accountNumber || "Unknown",
              errorDescription: explanation,
              bureau: bureau
            },
            userInfo
          );
          
          // Create dispute data
          const disputeData = {
            bureau: bureau,
            accountName: account.accountName,
            accountNumber: account.accountNumber || "Unknown",
            errorType: errorType,
            explanation: explanation,
            letterContent: letterContent
          };
          
          // Call the onGenerateDispute function to create a new letter
          onGenerateDispute(disputeData);
          
          // Store the auto-generated flag in session storage
          sessionStorage.setItem('autoGeneratedLetter', 'true');
        }
        
        // Notify user that CLEO has generated letters
        toast({
          title: "Dispute letters generated",
          description: `CLEO has generated ${accountsToDispute.length} dispute letters based on your credit report analysis.`,
          duration: 5000,
        });
        
        // Navigate to the dispute letters page to view the letters
        if (window.location.pathname !== '/dispute-letters') {
          navigate('/dispute-letters');
        }
      } catch (error) {
        console.error("Error processing report data:", error);
        toast({
          title: "Letter generation failed",
          description: "CLEO couldn't generate dispute letters. Please try uploading your report again.",
          variant: "destructive",
          duration: 5000,
        });
      }
    } else {
      // If no report data, prompt user to upload a report
      toast({
        title: "No credit report found",
        description: "Please upload a credit report for CLEO to analyze and generate dispute letters.",
        duration: 5000,
      });
      
      // Navigate to upload report page
      navigate('/upload-report');
    }
    
    setIsThinking(false);
  };

  return (
    <div className="fixed bottom-8 right-8 z-50">
      <div className="relative group">
        <button 
          className={`w-16 h-16 rounded-full bg-gradient-to-br from-credify-teal to-blue-500 text-white flex items-center justify-center shadow-lg hover:shadow-xl transition-all ${isThinking ? 'animate-pulse' : ''}`}
          aria-label="CLEO AI Assistant"
          onClick={handleActivateAI}
          disabled={isThinking}
        >
          {isThinking ? (
            <Sparkles size={28} className="animate-spin" />
          ) : (
            <Brain size={28} className="animate-pulse" />
          )}
        </button>
        
        <div className="absolute bottom-full right-0 mb-3 w-64 p-3 bg-white dark:bg-credify-navy rounded-lg shadow-xl opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 transform translate-y-2 group-hover:translate-y-0">
          <div className="text-credify-navy dark:text-white font-medium mb-1">CLEO AI Assistant</div>
          <div className="text-credify-navy-light dark:text-white/70 text-sm">
            I use AI to analyze credit reports, identify FCRA violations, and generate powerful dispute letters.
          </div>
          <div className="mt-2 flex gap-2">
            <button 
              className="text-xs bg-credify-teal/10 hover:bg-credify-teal/20 text-credify-teal px-2 py-1 rounded-full flex items-center gap-1"
              onClick={() => navigate('/upload-report')}
            >
              <FileText size={12} />
              <span>Upload Report</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DisputeAgent;
