
import { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { Profile } from '@/lib/supabase/client';
import { useAuth } from '@/contexts/auth';

export interface Letter {
  id: number;
  title: string;
  recipient: string;
  createdAt: string;
  status: string;
  bureaus: string[];
  content: string;
  accountName?: string;
  accountNumber?: string;
  errorType?: string;
}

export function useDisputeLettersData(testMode: boolean = false) {
  const [letters, setLetters] = useState<Letter[]>([]);
  const [selectedLetter, setSelectedLetter] = useState<Letter | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();
  const location = useLocation();
  const { profile } = useAuth();
  
  // Load letters from storage on component mount
  useEffect(() => {
    const loadLetters = async () => {
      try {
        setIsLoading(true);
        console.log("Loading dispute letters...");
        
        // For debugging - check what's in storage
        console.log("DisputeLetters page found in storage:", {
          generatedLetters: sessionStorage.getItem('generatedDisputeLetters') ? "present" : "missing",
          pendingLetter: sessionStorage.getItem('pendingDisputeLetter') ? "present" : "missing",
          autoLetter: sessionStorage.getItem('autoGeneratedLetter') ? "present" : "missing"
        });
        
        // First check session storage for automatically generated letters
        const generatedLettersJSON = sessionStorage.getItem('generatedDisputeLetters');
        const pendingLetterJSON = sessionStorage.getItem('pendingDisputeLetter');
        const autoGeneratedLetterJSON = sessionStorage.getItem('autoGeneratedLetter');
        
        // Try loading generated letters first (multiple)
        if (generatedLettersJSON) {
          try {
            const parsedLetters = JSON.parse(generatedLettersJSON);
            if (Array.isArray(parsedLetters) && parsedLetters.length > 0) {
              console.log(`Found ${parsedLetters.length} generated letters in session storage`);
              console.log("[DisputeLetters] Found letters in session storage");
              
              // Transform the letters to match our Letter interface
              const formattedLetters = parsedLetters.map((letter, index) => ({
                id: letter.id || Date.now() + index,
                title: letter.title || `${letter.errorType || 'Dispute'} (${letter.accountName || 'Account'})`,
                recipient: letter.bureau || letter.recipient || 'Credit Bureau',
                createdAt: letter.createdAt || new Date().toLocaleDateString('en-US', { 
                  month: 'short', day: 'numeric', year: 'numeric' 
                }),
                status: letter.status || 'draft',
                bureaus: letter.bureaus || [letter.bureau || 'Unknown'],
                content: letter.letterContent || letter.content || '',
                accountName: letter.accountName || '',
                accountNumber: letter.accountNumber || '',
                errorType: letter.errorType || 'general'
              }));
              
              setLetters(formattedLetters);
              
              // Select the first letter by default
              if (formattedLetters.length > 0 && !selectedLetter) {
                setSelectedLetter(formattedLetters[0]);
              }
              
              // Toast notification about loaded letters
              toast({
                title: testMode ? "Test Letters Loaded" : "Dispute Letters Loaded",
                description: `${formattedLetters.length} dispute ${formattedLetters.length === 1 ? 'letter has' : 'letters have'} been loaded${testMode ? ' in test mode' : ''}.`,
                duration: 5000,
              });
              
              setIsLoading(false);
              return;
            }
          } catch (error) {
            console.error("Error parsing generated letters:", error);
          }
        } 
        
        // If we don't have multiple letters, check for a single pending letter
        if (pendingLetterJSON || autoGeneratedLetterJSON) {
          try {
            const pendingLetter = pendingLetterJSON ? JSON.parse(pendingLetterJSON) : JSON.parse(autoGeneratedLetterJSON || '{}');
            console.log("Found pending letter in session storage");
            
            if (pendingLetter) {
              // Create formatted letter
              const formattedLetter = {
                id: pendingLetter.id || Date.now(),
                title: pendingLetter.title || `${pendingLetter.errorType || 'Dispute'} (${pendingLetter.accountName || 'Account'})`,
                recipient: pendingLetter.bureau || pendingLetter.recipient || 'Credit Bureau',
                createdAt: pendingLetter.createdAt || new Date().toLocaleDateString('en-US', { 
                  month: 'short', day: 'numeric', year: 'numeric' 
                }),
                status: pendingLetter.status || 'draft',
                bureaus: pendingLetter.bureaus || [pendingLetter.bureau || 'Unknown'],
                content: pendingLetter.letterContent || pendingLetter.content || '',
                accountName: pendingLetter.accountName || '',
                accountNumber: pendingLetter.accountNumber || '',
                errorType: pendingLetter.errorType || 'general'
              };
              
              setLetters([formattedLetter]);
              setSelectedLetter(formattedLetter);
              
              // Toast notification
              toast({
                title: testMode ? "Test Letter Loaded" : "Dispute Letter Loaded",
                description: "Your dispute letter has been loaded from session storage.",
                duration: 5000,
              });
              
              setIsLoading(false);
              return;
            }
          } catch (error) {
            console.error("Error parsing pending letter:", error);
          }
        }
        
        // If no letters found in session storage, set empty array
        console.log("No letters found in session storage");
        setLetters([]);
        setSelectedLetter(null);
        setIsLoading(false);
        
      } catch (error) {
        console.error("Error loading dispute letters:", error);
        setLetters([]);
        setIsLoading(false);
        
        toast({
          title: "Error Loading Letters",
          description: "There was a problem loading your dispute letters.",
          variant: "destructive",
        });
      }
    };
    
    // Load or check if we already loaded in this session
    const lettersLoaded = sessionStorage.getItem('lettersAlreadyLoaded');
    if (lettersLoaded === 'true' && letters.length > 0) {
      console.log("Letters already loaded in this session, skipping");
      return;
    }
    
    loadLetters();
    sessionStorage.setItem('lettersAlreadyLoaded', 'true');
  }, [toast, testMode, location.pathname, selectedLetter]);
  
  // Function to add a new letter
  const addLetter = (newLetter: Letter) => {
    setLetters(prevLetters => {
      const updatedLetters = [...prevLetters, newLetter];
      try {
        sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(updatedLetters));
      } catch (error) {
        console.error("Error storing updated letters:", error);
      }
      return updatedLetters;
    });
  };
  
  // Function to save changes to letters
  const updateLetters = (updatedLetters: Letter[]) => {
    setLetters(updatedLetters);
    try {
      sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(updatedLetters));
    } catch (error) {
      console.error("Error storing updated letters:", error);
    }
  };
  
  return {
    letters,
    setLetters: updateLetters,
    addLetter,
    selectedLetter,
    setSelectedLetter,
    isLoading,
    profile
  };
}
