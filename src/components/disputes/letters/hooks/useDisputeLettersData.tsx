
import { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { loadLettersFromStorage, saveLettersToStorage, addLetterToStorage, formatLetterFromStorage } from './letterStorageUtils';
import { useAuth } from '@/contexts/auth';

export interface Letter {
  id: number;
  title: string;
  recipient: string;
  createdAt: string;
  status: string;
  bureaus: string[];
  content: string;
  accountName?: string;
  accountNumber?: string;
  errorType?: string;
}

export function useDisputeLettersData() {
  const [letters, setLetters] = useState<Letter[]>([]);
  const [selectedLetter, setSelectedLetter] = useState<Letter | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();
  const location = useLocation();
  const { profile } = useAuth(); // Add the profile from the auth context
  
  // Check if we're in a forced reload state
  useEffect(() => {
    const forceReload = sessionStorage.getItem('forceReload');
    if (forceReload === 'true') {
      console.log("Force reload detected, clearing flag");
      sessionStorage.removeItem('forceReload');
      // The page has already been reloaded by this point
    }
  }, []);
  
  // Load letters from storage on component mount
  useEffect(() => {
    const loadLetters = async () => {
      try {
        setIsLoading(true);
        console.log("Loading dispute letters...");
        
        // Check for storage state for debugging
        const generatedLettersJSON = sessionStorage.getItem('generatedDisputeLetters');
        const pendingLetterJSON = sessionStorage.getItem('pendingDisputeLetter');
        const autoLetterJSON = sessionStorage.getItem('autoGeneratedLetter');
        
        console.log("DisputeLetters page found in storage:", {
          generatedLetters: generatedLettersJSON ? "present" : "missing",
          pendingLetter: pendingLetterJSON ? "present" : "missing", 
          autoLetter: autoLetterJSON ? "present" : "missing"
        });
        
        if (generatedLettersJSON) {
          try {
            const parsedLetters = JSON.parse(generatedLettersJSON);
            if (Array.isArray(parsedLetters) && parsedLetters.length > 0) {
              console.log(`Found ${parsedLetters.length} generated letters in session storage`);
              console.log("[DisputeLetters] Found letters in session storage");
              
              // Transform the letters to match our Letter interface
              const formattedLetters = parsedLetters.map((letter, index) => ({
                id: letter.id || Date.now() + index,
                title: letter.title || `${letter.errorType || 'Dispute'} (${letter.accountName || 'Account'})`,
                recipient: letter.bureau || letter.recipient || 'Credit Bureau',
                createdAt: letter.createdAt || new Date().toLocaleDateString('en-US', { 
                  month: 'short', day: 'numeric', year: 'numeric' 
                }),
                status: letter.status || 'draft',
                bureaus: letter.bureaus || [letter.bureau || 'Unknown'],
                content: letter.letterContent || letter.content,
                accountName: letter.accountName,
                accountNumber: letter.accountNumber,
                errorType: letter.errorType
              }));
              
              setLetters(formattedLetters);
              
              // Toast notification about loaded letters
              toast({
                title: "Dispute Letters Loaded",
                description: `${formattedLetters.length} dispute ${formattedLetters.length === 1 ? 'letter has' : 'letters have'} been loaded.`,
                duration: 5000,
              });
              
              setIsLoading(false);
              return;
            }
          } catch (error) {
            console.error("Error parsing generated letters:", error);
          }
        } 
        
        // If we don't have multiple letters, check for a single pending letter
        if (pendingLetterJSON) {
          try {
            const pendingLetter = JSON.parse(pendingLetterJSON);
            console.log("Found pending letter in session storage");
            
            // Create formatted letter
            const formattedLetter = {
              id: pendingLetter.id || Date.now(),
              title: pendingLetter.title || `${pendingLetter.errorType || 'Dispute'} (${pendingLetter.accountName || 'Account'})`,
              recipient: pendingLetter.bureau || pendingLetter.recipient || 'Credit Bureau',
              createdAt: pendingLetter.createdAt || new Date().toLocaleDateString('en-US', { 
                month: 'short', day: 'numeric', year: 'numeric' 
              }),
              status: pendingLetter.status || 'draft',
              bureaus: pendingLetter.bureaus || [pendingLetter.bureau || 'Unknown'],
              content: pendingLetter.letterContent || pendingLetter.content,
              accountName: pendingLetter.accountName,
              accountNumber: pendingLetter.accountNumber,
              errorType: pendingLetter.errorType
            };
            
            setLetters([formattedLetter]);
            
            // Toast notification
            toast({
              title: "Dispute Letter Loaded",
              description: "Your dispute letter has been loaded from session storage.",
              duration: 5000,
            });
            
            setIsLoading(false);
            return;
          } catch (error) {
            console.error("Error parsing pending letter:", error);
          }
        }
        
        // Also check for auto-generated letter as last resort
        if (autoLetterJSON) {
          try {
            const autoLetter = JSON.parse(autoLetterJSON);
            console.log("Found auto-generated letter in session storage");
            
            // Create formatted letter from auto-generated letter
            const formattedLetter = {
              id: autoLetter.id || Date.now(),
              title: autoLetter.title || `Auto-Generated Dispute Letter`,
              recipient: autoLetter.bureau || 'Credit Bureau',
              createdAt: autoLetter.createdAt || new Date().toLocaleDateString('en-US', { 
                month: 'short', day: 'numeric', year: 'numeric' 
              }),
              status: autoLetter.status || 'draft',
              bureaus: autoLetter.bureaus || [autoLetter.bureau || 'Unknown'],
              content: autoLetter.letterContent || autoLetter.content,
              accountName: autoLetter.accountName,
              accountNumber: autoLetter.accountNumber,
              errorType: autoLetter.errorType || 'Dispute'
            };
            
            setLetters([formattedLetter]);
            
            // Toast notification
            toast({
              title: "Auto-Generated Letter Loaded",
              description: "Your auto-generated dispute letter has been loaded.",
              duration: 5000,
            });
            
            setIsLoading(false);
            return;
          } catch (error) {
            console.error("Error parsing auto-generated letter:", error);
          }
        }
        
        // If no letters found in session storage, set empty array
        console.log("No letters found in session storage");
        setLetters([]);
        setIsLoading(false);
        
      } catch (error) {
        console.error("Error loading dispute letters:", error);
        setLetters([]);
        setIsLoading(false);
        
        toast({
          title: "Error Loading Letters",
          description: "There was a problem loading your dispute letters.",
          variant: "destructive",
        });
      }
    };
    
    loadLetters();
  }, [toast, location.pathname]);
  
  // Function to add a new letter
  const addLetter = (newLetter: Letter) => {
    setLetters(prevLetters => {
      const updatedLetters = [...prevLetters, newLetter];
      try {
        sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(updatedLetters));
      } catch (error) {
        console.error("Error storing updated letters:", error);
      }
      return updatedLetters;
    });
  };
  
  // Function to save changes to letters
  const updateLetters = (updatedLetters: Letter[]) => {
    setLetters(updatedLetters);
    try {
      sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(updatedLetters));
    } catch (error) {
      console.error("Error storing updated letters:", error);
    }
  };
  
  return {
    letters,
    setLetters: updateLetters,
    addLetter,
    selectedLetter,
    setSelectedLetter,
    isLoading,
    profile // Return the profile from the auth context
  };
}
