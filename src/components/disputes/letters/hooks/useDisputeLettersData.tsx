
import { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import { getUserDisputeLetters, saveDisputeLetter } from '@/lib/supabase/disputeLetters';

interface Letter {
  id: number;
  title: string;
  recipient: string;
  createdAt: string;
  status: string;
  bureaus: string[];
  laws?: string[];
  content: string;
  resolvedAt?: string;
  accountName?: string;
  accountNumber?: string;
  errorType?: string;
}

export const useDisputeLettersData = (testMode: boolean = false) => {
  const { toast } = useToast();
  const { user } = useAuth();
  const [letters, setLetters] = useState<Letter[]>([]);
  const [selectedLetter, setSelectedLetter] = useState<Letter | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const location = useLocation();
  
  // Load letters from storage on component mount
  useEffect(() => {
    const loadLetters = async () => {
      try {
        setIsLoading(true);
        console.log("Loading dispute letters...");
        
        // First check session storage for automatically generated letters
        const generatedLettersJSON = sessionStorage.getItem('generatedDisputeLetters');
        const pendingLetterJSON = sessionStorage.getItem('pendingDisputeLetter');
        const autoGeneratedFlag = sessionStorage.getItem('autoGeneratedLetter');
        
        console.log("Checking for letters in session storage:");
        console.log("- generatedDisputeLetters exists:", !!generatedLettersJSON);
        console.log("- pendingDisputeLetter exists:", !!pendingLetterJSON);
        console.log("- autoGeneratedLetter flag:", autoGeneratedFlag);
        
        // If we have generated letters in session storage
        if (generatedLettersJSON) {
          try {
            const parsedLetters = JSON.parse(generatedLettersJSON);
            if (Array.isArray(parsedLetters) && parsedLetters.length > 0) {
              console.log(`Found ${parsedLetters.length} generated letters in session storage`);
              
              // Transform the letters to match our Letter interface
              const formattedLetters = parsedLetters.map((letter, index) => ({
                id: letter.id || Date.now() + index,
                title: letter.title || `${letter.errorType || 'Dispute'} (${letter.accountName || 'Account'})`,
                recipient: letter.bureau || letter.recipient || 'Credit Bureau',
                createdAt: letter.createdAt || new Date().toLocaleDateString('en-US', { 
                  month: 'short', day: 'numeric', year: 'numeric' 
                }),
                status: letter.status || 'draft',
                bureaus: letter.bureaus || [letter.bureau || 'Unknown'],
                content: letter.letterContent || letter.content,
                accountName: letter.accountName,
                accountNumber: letter.accountNumber,
                errorType: letter.errorType
              }));
              
              setLetters(formattedLetters);
              
              // Toast notification about loaded letters
              toast({
                title: testMode ? "Test Letters Loaded" : "Dispute Letters Loaded",
                description: `${formattedLetters.length} dispute ${formattedLetters.length === 1 ? 'letter has' : 'letters have'} been loaded${testMode ? ' in test mode' : ''}.`,
                duration: 5000,
              });
              
              setIsLoading(false);
              return;
            }
          } catch (error) {
            console.error("Error parsing generated letters:", error);
          }
        } 
        
        // If we don't have multiple letters, check for a single pending letter
        if (pendingLetterJSON) {
          try {
            const pendingLetter = JSON.parse(pendingLetterJSON);
            console.log("Found pending letter in session storage:", pendingLetter);
            
            // Create formatted letter
            const formattedLetter = {
              id: pendingLetter.id || Date.now(),
              title: pendingLetter.title || `${pendingLetter.errorType || 'Dispute'} (${pendingLetter.accountName || 'Account'})`,
              recipient: pendingLetter.bureau || pendingLetter.recipient || 'Credit Bureau',
              createdAt: pendingLetter.createdAt || new Date().toLocaleDateString('en-US', { 
                month: 'short', day: 'numeric', year: 'numeric' 
              }),
              status: pendingLetter.status || 'draft',
              bureaus: pendingLetter.bureaus || [pendingLetter.bureau || 'Unknown'],
              content: pendingLetter.letterContent || pendingLetter.content,
              accountName: pendingLetter.accountName,
              accountNumber: pendingLetter.accountNumber,
              errorType: pendingLetter.errorType
            };
            
            setLetters([formattedLetter]);
            
            // Toast notification
            toast({
              title: testMode ? "Test Letter Loaded" : "Dispute Letter Loaded",
              description: "Your dispute letter has been loaded from session storage.",
              duration: 5000,
            });
            
            setIsLoading(false);
            return;
          } catch (error) {
            console.error("Error parsing pending letter:", error);
          }
        }
        
        // If no letters found in session storage, load from database or use samples
        if (user?.id) {
          try {
            const userLetters = await getUserDisputeLetters(user.id);
            if (userLetters && userLetters.length > 0) {
              const formattedLetters = userLetters.map(letter => ({
                id: letter.id,
                title: `${letter.error_type} Dispute (${letter.account_name})`,
                recipient: letter.bureau,
                createdAt: new Date(letter.created_at).toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
                status: 'in-progress',
                bureaus: [letter.bureau],
                laws: ['FCRA § 611', 'FCRA § 623'],
                content: letter.letter_content,
                accountName: letter.account_name,
                accountNumber: letter.account_number,
                errorType: letter.error_type
              }));
              setLetters(formattedLetters);
              console.log("Loaded letters from DB:", formattedLetters.length);
              setIsLoading(false);
              return;
            }
          } catch (error) {
            console.error("Error loading letters from database:", error);
          }
        }
        
        // If no letters found in session storage or database, set sample letters
        console.log("No letters found in session storage or database, using samples");
        setLetters(getSampleLetters());
        setIsLoading(false);
        
      } catch (error) {
        console.error("Error loading dispute letters:", error);
        setLetters(getSampleLetters());
        setIsLoading(false);
        
        toast({
          title: "Error Loading Letters",
          description: "There was a problem loading your dispute letters.",
          variant: "destructive",
        });
      }
    };
    
    loadLetters();
  }, [toast, testMode, location.pathname, user?.id]);
  
  const getSampleLetters = (): Letter[] => {
    return [
      {
        id: 1,
        title: 'Duplicate Account Dispute (Bank of America)',
        recipient: 'Experian',
        createdAt: 'May 10, 2023',
        status: 'in-progress',
        bureaus: ['Experian', 'TransUnion'],
        laws: ['FCRA § 611', 'FCRA § 623'],
        content: `Dear Experian,\n\nI am writing to dispute a duplicate account appearing on my credit report. The Bank of America account appears twice with different account numbers. This is affecting my credit utilization ratio negatively.\n\nUnder the Fair Credit Reporting Act, I request that you investigate this matter and remove the duplicate entry.\n\nSincerely,\n[YOUR NAME]`
      },
      {
        id: 2,
        title: 'Incorrect Balance Dispute (Chase Card)',
        recipient: 'All Bureaus',
        createdAt: 'Apr 22, 2023',
        status: 'resolved',
        bureaus: ['Experian', 'Equifax', 'TransUnion'],
        laws: ['FCRA § 623'],
        resolvedAt: 'May 12, 2023',
        content: `Dear Credit Bureau,\n\nI am writing to dispute an incorrect balance on my Chase credit card. The current balance is reported as $8,450, but my actual balance is $4,225.\n\nPlease investigate this matter as required by the FCRA and update the information accordingly.\n\nSincerely,\n[YOUR NAME]`
      },
      {
        id: 3,
        title: 'Outdated Address Information Dispute',
        recipient: 'Equifax',
        createdAt: 'May 5, 2023',
        status: 'in-progress',
        bureaus: ['Equifax'],
        laws: ['FCRA § 605'],
        content: `Dear Equifax,\n\nI am writing to request that you update the address information on my credit report. My current report shows an old address that I haven't lived at for over 3 years.\n\nPlease update this information as required by the FCRA.\n\nSincerely,\n[YOUR NAME]`
      },
      {
        id: 4,
        title: 'Late Payment Dispute (Capital One)',
        recipient: 'TransUnion',
        createdAt: 'Mar 15, 2023',
        status: 'resolved',
        bureaus: ['TransUnion'],
        laws: ['FCRA § 623'],
        resolvedAt: 'Apr 10, 2023',
        content: `Dear TransUnion,\n\nI am writing to dispute a late payment record on my Capital One account. I have always made payments on time, and I have included proof of my payment history.\n\nPlease investigate this matter and remove the incorrect late payment notation.\n\nSincerely,\n[YOUR NAME]`
      },
      {
        id: 5,
        title: 'Hard Inquiry Dispute (Unknown Source)',
        recipient: 'All Bureaus',
        createdAt: 'May 1, 2023',
        status: 'in-progress',
        bureaus: ['Experian', 'Equifax', 'TransUnion'],
        laws: ['FCRA § 604', 'FCRA § 611'],
        content: `Dear Credit Bureau,\n\nI am writing to dispute an unauthorized hard inquiry on my credit report. I did not authorize this inquiry and suspect it may be fraudulent.\n\nUnder the FCRA, I request that you investigate and remove this unauthorized inquiry.\n\nSincerely,\n[YOUR NAME]`
      },
    ];
  };

  // Function to add a new letter
  const addLetter = (newLetter: Letter) => {
    setLetters(prevLetters => {
      const updatedLetters = [...prevLetters, newLetter];
      try {
        sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(updatedLetters));
      } catch (error) {
        console.error("Error storing updated letters:", error);
      }
      return updatedLetters;
    });
  };
  
  // Function to save changes to letters
  const updateLetters = (updatedLetters: Letter[]) => {
    setLetters(updatedLetters);
    try {
      sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(updatedLetters));
    } catch (error) {
      console.error("Error storing updated letters:", error);
    }
  };

  // Function to save letter to database if user is logged in
  const saveLetter = async (disputeData: any) => {
    if (user?.id) {
      try {
        console.log("Saving letter to database:", disputeData.accountName);
        const saved = await saveDisputeLetter(user.id, disputeData);
        return saved;
      } catch (error) {
        console.error('Error saving dispute letter:', error);
        toast({
          title: "Error saving letter",
          description: "There was a problem saving your dispute letter to your account.",
          variant: "destructive",
        });
      }
    }
    return false;
  };
  
  return {
    letters,
    setLetters: updateLetters,
    addLetter,
    selectedLetter,
    setSelectedLetter,
    isLoading,
    saveLetter
  };
};
