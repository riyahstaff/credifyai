import { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';

interface Letter {
  id: number;
  title: string;
  recipient: string;
  createdAt: string;
  status: string;
  bureaus: string[];
  content: string;
  accountName?: string;
  accountNumber?: string;
  errorType?: string;
  letterContent?: string; // Property added for compatibility
  laws?: string[]; // Added the missing laws property
  resolvedAt?: string; // Added the missing resolvedAt property
  explanation?: string; // Added explanation field
  bureau?: string; // Added bureau field for compatibility
  timestamp?: string; // Added timestamp field
}

export function useDisputeLettersData(testMode: boolean = false) {
  const [letters, setLetters] = useState<Letter[]>([]);
  const [selectedLetter, setSelectedLetter] = useState<Letter | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();
  const location = useLocation();
  
  useEffect(() => {
    const loadLetters = async () => {
      try {
        setIsLoading(true);
        console.log("[useDisputeLettersData] Loading dispute letters...");
        
        const forceReload = sessionStorage.getItem('forceLettersReload');
        if (forceReload === 'true') {
          console.log("[useDisputeLettersData] Force reload flag detected, clearing it");
          sessionStorage.removeItem('forceLettersReload');
          await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        const generatedLettersJSON = sessionStorage.getItem('generatedDisputeLetters');
        const pendingLetterJSON = sessionStorage.getItem('pendingDisputeLetter');
        const autoGeneratedFlag = sessionStorage.getItem('autoGeneratedLetter');
        
        console.log("[useDisputeLettersData] Auto-generated flag:", autoGeneratedFlag);
        console.log("[useDisputeLettersData] Generated letters JSON exists:", !!generatedLettersJSON);
        console.log("[useDisputeLettersData] Pending letter JSON exists:", !!pendingLetterJSON);
        
        if (generatedLettersJSON) {
          try {
            const parsedLetters = JSON.parse(generatedLettersJSON);
            console.log("[useDisputeLettersData] Parsed generated letters:", parsedLetters);
            
            if (Array.isArray(parsedLetters) && parsedLetters.length > 0) {
              console.log(`[useDisputeLettersData] Found ${parsedLetters.length} generated letters in session storage`);
              
              const formattedLetters = parsedLetters.map((letter, index) => {
                const content = letter.content || letter.letterContent || '';
                return {
                  id: letter.id || Date.now() + index,
                  title: letter.title || `${letter.errorType || 'Dispute'} (${letter.accountName || 'Account'})`,
                  recipient: letter.bureau || letter.recipient || 'Credit Bureau',
                  createdAt: letter.createdAt || new Date().toLocaleDateString('en-US', { 
                    month: 'short', day: 'numeric', year: 'numeric' 
                  }),
                  status: letter.status || 'draft',
                  bureaus: letter.bureaus || [letter.bureau || 'Unknown'],
                  content: content,
                  accountName: letter.accountName || '',
                  accountNumber: letter.accountNumber || '',
                  errorType: letter.errorType || 'General Dispute',
                  letterContent: content,
                  explanation: letter.explanation,
                  bureau: letter.bureau,
                  timestamp: letter.timestamp
                };
              });
              
              console.log("[useDisputeLettersData] Formatted letters:", formattedLetters);
              setLetters(formattedLetters);
              
              if (formattedLetters.length > 0) {
                setSelectedLetter(formattedLetters[0]);
                console.log("[useDisputeLettersData] Selected first letter:", formattedLetters[0]);
              }
              
              if (autoGeneratedFlag === 'true') {
                toast({
                  title: testMode ? "Test Letters Loaded" : "Dispute Letters Loaded",
                  description: `${formattedLetters.length} dispute ${formattedLetters.length === 1 ? 'letter has' : 'letters have'} been loaded${testMode ? ' in test mode' : ''}.`,
                  duration: 5000,
                });
              }
              
              setIsLoading(false);
              return;
            } else {
              console.warn("[useDisputeLettersData] Parsed generated letters is not an array or is empty");
            }
          } catch (error) {
            console.error("[useDisputeLettersData] Error parsing generated letters:", error);
          }
        } 
        
        if (pendingLetterJSON) {
          try {
            const pendingLetter = JSON.parse(pendingLetterJSON);
            console.log("[useDisputeLettersData] Found pending letter in session storage", pendingLetter);
            
            const content = pendingLetter.content || pendingLetter.letterContent || '';
            
            const formattedLetter: Letter = {
              id: pendingLetter.id || Date.now(),
              title: pendingLetter.title || `${pendingLetter.errorType || 'Dispute'} (${pendingLetter.accountName || 'Account'})`,
              recipient: pendingLetter.bureau || pendingLetter.recipient || 'Credit Bureau',
              createdAt: pendingLetter.createdAt || new Date().toLocaleDateString('en-US', { 
                month: 'short', day: 'numeric', year: 'numeric' 
              }),
              status: pendingLetter.status || 'draft',
              bureaus: pendingLetter.bureaus || [pendingLetter.bureau || 'Unknown'],
              content: content,
              accountName: pendingLetter.accountName || '',
              accountNumber: pendingLetter.accountNumber || '',
              errorType: pendingLetter.errorType || 'General Dispute',
              letterContent: content,
              explanation: pendingLetter.explanation,
              bureau: pendingLetter.bureau,
              timestamp: pendingLetter.timestamp
            };
            
            if (!formattedLetter.content || formattedLetter.content.length < 10) {
              const fallbackContent = `
Dear ${formattedLetter.recipient},

I am writing to dispute the following information in my credit report:

Account Name: ${formattedLetter.accountName || "Unknown"}
Account Number: ${formattedLetter.accountNumber || "Unknown"}
Issue: ${formattedLetter.errorType || "Inaccurate Information"}

Under the Fair Credit Reporting Act, you are required to investigate this dispute and remove any inaccurate information.

Sincerely,
[YOUR NAME]
              `;
              formattedLetter.content = fallbackContent;
              formattedLetter.letterContent = fallbackContent;
            }
            
            console.log("[useDisputeLettersData] Formatted pending letter:", formattedLetter);
            setLetters([formattedLetter]);
            setSelectedLetter(formattedLetter);
            
            if (autoGeneratedFlag === 'true') {
              toast({
                title: testMode ? "Test Letter Loaded" : "Dispute Letter Loaded",
                description: "Your dispute letter has been loaded from session storage.",
                duration: 5000,
              });
            }
            
            setIsLoading(false);
            return;
          } catch (error) {
            console.error("[useDisputeLettersData] Error parsing pending letter:", error);
          }
        }
        
        console.log("[useDisputeLettersData] No letters found in storage, creating sample letters");
        const sampleLetters = getSampleLetters();
        setLetters(sampleLetters);
        
        if (sampleLetters.length > 0) {
          setSelectedLetter(sampleLetters[0]);
        }
        
        setIsLoading(false);
      } catch (error) {
        console.error("[useDisputeLettersData] Error loading dispute letters:", error);
        
        const sampleLetters = getSampleLetters();
        setLetters(sampleLetters);
        
        if (sampleLetters.length > 0) {
          setSelectedLetter(sampleLetters[0]);
        }
        
        setIsLoading(false);
        
        toast({
          title: "Error Loading Letters",
          description: "There was a problem loading your dispute letters. Sample letters are displayed instead.",
          variant: "destructive",
        });
      }
    };
    
    loadLetters();
  }, [toast, testMode, location.pathname]);
  
  const getSampleLetters = (): Letter[] => {
    return [
      {
        id: 1,
        title: 'Duplicate Account Dispute (Bank of America)',
        recipient: 'Experian',
        createdAt: 'May 10, 2023',
        status: 'in-progress',
        bureaus: ['Experian', 'TransUnion'],
        laws: ['FCRA ยง 611', 'FCRA ยง 623'],
        content: `Dear Experian,

I am writing to dispute a duplicate account appearing on my credit report. The Bank of America account appears twice with different account numbers. This is affecting my credit utilization ratio negatively.

Account Name: Bank of America
Account Number: XXXX-XXXX-XXXX-1234
Reason for Dispute: Duplicate Account

Under the Fair Credit Reporting Act, I request that you investigate this matter and remove the duplicate entry.

Sincerely,
[YOUR NAME]`,
        letterContent: `Dear Experian,

I am writing to dispute a duplicate account appearing on my credit report. The Bank of America account appears twice with different account numbers. This is affecting my credit utilization ratio negatively.

Account Name: Bank of America
Account Number: XXXX-XXXX-XXXX-1234
Reason for Dispute: Duplicate Account

Under the Fair Credit Reporting Act, I request that you investigate this matter and remove the duplicate entry.

Sincerely,
[YOUR NAME]`,
        accountName: 'Bank of America',
        accountNumber: 'XXXX-XXXX-XXXX-1234',
        errorType: 'Duplicate Account'
      },
      {
        id: 2,
        title: 'Incorrect Balance Dispute (Chase Card)',
        recipient: 'All Bureaus',
        createdAt: 'Apr 22, 2023',
        status: 'resolved',
        bureaus: ['Experian', 'Equifax', 'TransUnion'],
        laws: ['FCRA ยง 623'],
        resolvedAt: 'May 12, 2023',
        content: `Dear Credit Bureau,

I am writing to dispute an incorrect balance on my Chase credit card. The current balance is reported as $8,450, but my actual balance is $4,225.

Account Name: Chase Card Services
Account Number: XXXX-XXXX-XXXX-5678
Reason for Dispute: Incorrect Balance

Please investigate this matter as required by the FCRA and update the information accordingly.

Sincerely,
[YOUR NAME]`,
        letterContent: `Dear Credit Bureau,

I am writing to dispute an incorrect balance on my Chase credit card. The current balance is reported as $8,450, but my actual balance is $4,225.

Account Name: Chase Card Services
Account Number: XXXX-XXXX-XXXX-5678
Reason for Dispute: Incorrect Balance

Please investigate this matter as required by the FCRA and update the information accordingly.

Sincerely,
[YOUR NAME]`,
        accountName: 'Chase Card Services',
        accountNumber: 'XXXX-XXXX-XXXX-5678',
        errorType: 'Incorrect Balance'
      },
      {
        id: 3,
        title: 'Outdated Address Information Dispute',
        recipient: 'Equifax',
        createdAt: 'May 5, 2023',
        status: 'in-progress',
        bureaus: ['Equifax'],
        laws: ['FCRA ยง 605'],
        content: `Dear Equifax,

I am writing to request that you update the address information on my credit report. My current report shows an old address that I haven't lived at for over 3 years.

Please update this information as required by the FCRA.

Sincerely,
[YOUR NAME]`,
        letterContent: `Dear Equifax,

I am writing to request that you update the address information on my credit report. My current report shows an old address that I haven't lived at for over 3 years.

Please update this information as required by the FCRA.

Sincerely,
[YOUR NAME]`,
        errorType: 'Outdated Personal Information'
      }
    ];
  };
  
  const addLetter = (newLetter: Letter) => {
    if (!newLetter.letterContent && newLetter.content) {
      newLetter.letterContent = newLetter.content;
    } else if (!newLetter.content && newLetter.letterContent) {
      newLetter.content = newLetter.letterContent;
    }
    
    setLetters(prevLetters => {
      const updatedLetters = [newLetter, ...prevLetters];
      try {
        sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(updatedLetters));
        sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(newLetter));
        sessionStorage.setItem('autoGeneratedLetter', 'true');
      } catch (error) {
        console.error("[useDisputeLettersData] Error storing updated letters:", error);
      }
      return updatedLetters;
    });
    
    setSelectedLetter(newLetter);
  };
  
  const updateLetters = (updatedLetters: Letter[]) => {
    const formattedLetters = updatedLetters.map(letter => {
      if (!letter.letterContent && letter.content) {
        letter.letterContent = letter.content;
      } else if (!letter.content && letter.letterContent) {
        letter.content = letter.letterContent;
      }
      return letter;
    });
    
    setLetters(formattedLetters);
    try {
      sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(formattedLetters));
      
      if (formattedLetters.length > 0) {
        if (selectedLetter) {
          const updatedSelectedLetter = formattedLetters.find(letter => letter.id === selectedLetter.id);
          if (updatedSelectedLetter) {
            setSelectedLetter(updatedSelectedLetter);
            sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(updatedSelectedLetter));
          } else {
            setSelectedLetter(formattedLetters[0]);
            sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(formattedLetters[0]));
          }
        } else {
          setSelectedLetter(formattedLetters[0]);
          sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(formattedLetters[0]));
        }
        
        sessionStorage.setItem('autoGeneratedLetter', 'true');
      } else {
        setSelectedLetter(null);
        sessionStorage.removeItem('pendingDisputeLetter');
        sessionStorage.removeItem('autoGeneratedLetter');
      }
    } catch (error) {
      console.error("[useDisputeLettersData] Error storing updated letters:", error);
    }
  };
  
  return {
    letters,
    setLetters: updateLetters,
    addLetter,
    selectedLetter,
    setSelectedLetter,
    isLoading
  };
}
