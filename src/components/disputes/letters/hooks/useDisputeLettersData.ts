
import { useState, useEffect } from 'react';
import { useToast } from '@/hooks/use-toast';

// Define letter type
interface Letter {
  id: number;
  title: string;
  recipient: string;
  createdAt: string;
  status: string;
  bureaus: string[];
  laws: string[];
  content: string;
  resolvedAt?: string;
}

export const useDisputeLettersData = () => {
  const [letters, setLetters] = useState<Letter[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();

  useEffect(() => {
    const loadLetters = async () => {
      setIsLoading(true);
      try {
        // First check if there are any auto-generated letters in session storage
        const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
        const generatedLetters = sessionStorage.getItem('generatedDisputeLetters');
        
        console.log("Checking for auto-generated letters");
        console.log("Auto-generated flag:", sessionStorage.getItem('autoGeneratedLetter'));
        console.log("Pending letter:", pendingLetter ? "Present" : "Not present");
        console.log("Generated letters:", generatedLetters ? "Present" : "Not present");
        
        let disputeLetters: Letter[] = [];
        
        // Try to load generated letters first
        if (generatedLetters) {
          try {
            const parsedGeneratedLetters = JSON.parse(generatedLetters);
            console.log(`Found ${parsedGeneratedLetters.length} auto-generated letters`);
            
            // Convert the stored format to our Letter format
            disputeLetters = parsedGeneratedLetters.map((letter: any, index: number) => ({
              id: Date.now() + index,
              title: `${letter.errorType} Dispute (${letter.accountName})`,
              recipient: letter.bureau,
              createdAt: new Date(letter.timestamp).toLocaleDateString('en-US', { 
                month: 'short', day: 'numeric', year: 'numeric' 
              }),
              status: 'draft',
              bureaus: [letter.bureau],
              laws: ['FCRA ยง 611', 'FCRA ยง 623'],
              content: letter.letterContent
            }));
            
            // Log saving activities (no actual DB save in this version, just UI display)
            disputeLetters.forEach(letter => {
              console.log(`Saving letter to DB: ${letter.title}`);
            });
          } catch (error) {
            console.error("Error parsing generated letters:", error);
          }
        } 
        // If no generated letters array, but we have a pending letter
        else if (pendingLetter) {
          try {
            const parsedLetter = JSON.parse(pendingLetter);
            console.log("Found pending dispute letter");
            
            disputeLetters = [{
              id: Date.now(),
              title: `${parsedLetter.errorType} Dispute (${parsedLetter.accountName})`,
              recipient: parsedLetter.bureau,
              createdAt: new Date(parsedLetter.timestamp || Date.now()).toLocaleDateString('en-US', { 
                month: 'short', day: 'numeric', year: 'numeric' 
              }),
              status: 'draft',
              bureaus: [parsedLetter.bureau],
              laws: ['FCRA ยง 611', 'FCRA ยง 623'],
              content: parsedLetter.letterContent
            }];
            
            console.log("Saving letter to DB:", disputeLetters[0].title);
          } catch (error) {
            console.error("Error parsing pending letter:", error);
          }
        }
        
        // Display the letters
        if (disputeLetters.length > 0) {
          setLetters(disputeLetters);
          toast({
            title: `${disputeLetters.length} Dispute Letter${disputeLetters.length > 1 ? 's' : ''} Loaded`,
            description: "Your dispute letters are ready for review and download.",
            duration: 5000,
          });
        } else {
          console.log("No dispute letters found in storage");
        }
      } catch (error) {
        console.error("Error loading letters:", error);
        toast({
          title: "Error Loading Letters",
          description: "There was a problem loading your dispute letters.",
          variant: "destructive",
          duration: 5000,
        });
      } finally {
        setIsLoading(false);
      }
    };

    loadLetters();
  }, [toast]);

  return { letters, isLoading };
};
