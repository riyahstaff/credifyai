
import { useState, useEffect } from 'react';
import { useLocation } from 'react-router-dom';
import { useToast } from '@/hooks/use-toast';

interface Letter {
  id: number;
  title: string;
  recipient: string;
  createdAt: string;
  status: string;
  bureaus: string[];
  content: string;
  accountName?: string;
  accountNumber?: string;
  errorType?: string;
  letterContent?: string; // Added this property to fix TypeScript error
}

export function useDisputeLettersData(testMode: boolean = false) {
  const [letters, setLetters] = useState<Letter[]>([]);
  const [selectedLetter, setSelectedLetter] = useState<Letter | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const { toast } = useToast();
  const location = useLocation();
  
  // Load letters from storage on component mount
  useEffect(() => {
    const loadLetters = async () => {
      try {
        setIsLoading(true);
        console.log("[useDisputeLettersData] Loading dispute letters...");
        
        // Check for the force reload flag
        const forceReload = sessionStorage.getItem('forceLettersReload');
        if (forceReload === 'true') {
          console.log("[useDisputeLettersData] Force reload flag detected, clearing it");
          sessionStorage.removeItem('forceLettersReload');
          // Add a slight delay to ensure consistent state
          await new Promise(resolve => setTimeout(resolve, 100));
        }
        
        // First check session storage for automatically generated letters
        const generatedLettersJSON = sessionStorage.getItem('generatedDisputeLetters');
        const pendingLetterJSON = sessionStorage.getItem('pendingDisputeLetter');
        const autoGeneratedFlag = sessionStorage.getItem('autoGeneratedLetter');
        
        console.log("[useDisputeLettersData] Auto-generated flag:", autoGeneratedFlag);
        console.log("[useDisputeLettersData] Generated letters JSON exists:", !!generatedLettersJSON);
        console.log("[useDisputeLettersData] Pending letter JSON exists:", !!pendingLetterJSON);
        
        if (generatedLettersJSON) {
          try {
            const parsedLetters = JSON.parse(generatedLettersJSON);
            console.log("[useDisputeLettersData] Parsed generated letters:", parsedLetters);
            
            if (Array.isArray(parsedLetters) && parsedLetters.length > 0) {
              console.log(`[useDisputeLettersData] Found ${parsedLetters.length} generated letters in session storage`);
              
              // Transform the letters to match our Letter interface
              const formattedLetters = parsedLetters.map((letter, index) => {
                // Ensure both content and letterContent are set
                const content = letter.content || letter.letterContent || '';
                return {
                  id: letter.id || Date.now() + index,
                  title: letter.title || `${letter.errorType || 'Dispute'} (${letter.accountName || 'Account'})`,
                  recipient: letter.bureau || letter.recipient || 'Credit Bureau',
                  createdAt: letter.createdAt || new Date().toLocaleDateString('en-US', { 
                    month: 'short', day: 'numeric', year: 'numeric' 
                  }),
                  status: letter.status || 'draft',
                  bureaus: letter.bureaus || [letter.bureau || 'Unknown'],
                  content: content,
                  accountName: letter.accountName || '',
                  accountNumber: letter.accountNumber || '',
                  errorType: letter.errorType || 'General Dispute',
                  letterContent: content // Ensure letterContent is set
                };
              });
              
              console.log("[useDisputeLettersData] Formatted letters:", formattedLetters);
              setLetters(formattedLetters);
              
              // Also select the first letter
              if (formattedLetters.length > 0) {
                setSelectedLetter(formattedLetters[0]);
                console.log("[useDisputeLettersData] Selected first letter:", formattedLetters[0]);
              }
              
              // Toast notification about loaded letters
              if (autoGeneratedFlag === 'true') {
                toast({
                  title: testMode ? "Test Letters Loaded" : "Dispute Letters Loaded",
                  description: `${formattedLetters.length} dispute ${formattedLetters.length === 1 ? 'letter has' : 'letters have'} been loaded${testMode ? ' in test mode' : ''}.`,
                  duration: 5000,
                });
              }
              
              setIsLoading(false);
              return;
            } else {
              console.warn("[useDisputeLettersData] Parsed generated letters is not an array or is empty");
            }
          } catch (error) {
            console.error("[useDisputeLettersData] Error parsing generated letters:", error);
          }
        } 
        
        // If we don't have multiple letters, check for a single pending letter
        if (pendingLetterJSON) {
          try {
            const pendingLetter = JSON.parse(pendingLetterJSON);
            console.log("[useDisputeLettersData] Found pending letter in session storage", pendingLetter);
            
            // Ensure both content and letterContent are set
            const content = pendingLetter.content || pendingLetter.letterContent || '';
            
            // Create formatted letter
            const formattedLetter: Letter = {
              id: pendingLetter.id || Date.now(),
              title: pendingLetter.title || `${pendingLetter.errorType || 'Dispute'} (${pendingLetter.accountName || 'Account'})`,
              recipient: pendingLetter.bureau || pendingLetter.recipient || 'Credit Bureau',
              createdAt: pendingLetter.createdAt || new Date().toLocaleDateString('en-US', { 
                month: 'short', day: 'numeric', year: 'numeric' 
              }),
              status: pendingLetter.status || 'draft',
              bureaus: pendingLetter.bureaus || [pendingLetter.bureau || 'Unknown'],
              content: content,
              accountName: pendingLetter.accountName || '',
              accountNumber: pendingLetter.accountNumber || '',
              errorType: pendingLetter.errorType || 'General Dispute',
              letterContent: content // Ensure letterContent is set
            };
            
            // Ensure the letter content is not empty
            if (!formattedLetter.content || formattedLetter.content.length < 10) {
              const fallbackContent = `
Dear ${formattedLetter.recipient},

I am writing to dispute the following information in my credit report:

Account Name: ${formattedLetter.accountName || "Unknown"}
Account Number: ${formattedLetter.accountNumber || "Unknown"}
Issue: ${formattedLetter.errorType || "Inaccurate Information"}

Under the Fair Credit Reporting Act, you are required to investigate this dispute and remove any inaccurate information.

Sincerely,
[YOUR NAME]
              `;
              formattedLetter.content = fallbackContent;
              formattedLetter.letterContent = fallbackContent;
            }
            
            console.log("[useDisputeLettersData] Formatted pending letter:", formattedLetter);
            setLetters([formattedLetter]);
            setSelectedLetter(formattedLetter);
            
            // Toast notification
            if (autoGeneratedFlag === 'true') {
              toast({
                title: testMode ? "Test Letter Loaded" : "Dispute Letter Loaded",
                description: "Your dispute letter has been loaded from session storage.",
                duration: 5000,
              });
            }
            
            setIsLoading(false);
            return;
          } catch (error) {
            console.error("[useDisputeLettersData] Error parsing pending letter:", error);
          }
        }
        
        // After checking storage, create sample letters if nothing was found
        // This ensures we always have some letters to display
        console.log("[useDisputeLettersData] No letters found in storage, creating sample letters");
        const sampleLetters = getSampleLetters();
        setLetters(sampleLetters);
        
        if (sampleLetters.length > 0) {
          setSelectedLetter(sampleLetters[0]);
        }
        
        setIsLoading(false);
      } catch (error) {
        console.error("[useDisputeLettersData] Error loading dispute letters:", error);
        
        // Use sample letters as fallback
        const sampleLetters = getSampleLetters();
        setLetters(sampleLetters);
        
        if (sampleLetters.length > 0) {
          setSelectedLetter(sampleLetters[0]);
        }
        
        setIsLoading(false);
        
        toast({
          title: "Error Loading Letters",
          description: "There was a problem loading your dispute letters. Sample letters are displayed instead.",
          variant: "destructive",
        });
      }
    };
    
    loadLetters();
  }, [toast, testMode, location.pathname]);
  
  // Get sample letters for the case when no letters are found
  const getSampleLetters = (): Letter[] => {
    return [
      {
        id: 1,
        title: 'Duplicate Account Dispute (Bank of America)',
        recipient: 'Experian',
        createdAt: 'May 10, 2023',
        status: 'in-progress',
        bureaus: ['Experian', 'TransUnion'],
        laws: ['FCRA ยง 611', 'FCRA ยง 623'],
        content: `Dear Experian,\n\nI am writing to dispute a duplicate account appearing on my credit report. The Bank of America account appears twice with different account numbers. This is affecting my credit utilization ratio negatively.\n\nUnder the Fair Credit Reporting Act, I request that you investigate this matter and remove the duplicate entry.\n\nSincerely,\n[YOUR NAME]`,
        letterContent: `Dear Experian,\n\nI am writing to dispute a duplicate account appearing on my credit report. The Bank of America account appears twice with different account numbers. This is affecting my credit utilization ratio negatively.\n\nUnder the Fair Credit Reporting Act, I request that you investigate this matter and remove the duplicate entry.\n\nSincerely,\n[YOUR NAME]`
      },
      {
        id: 2,
        title: 'Incorrect Balance Dispute (Chase Card)',
        recipient: 'All Bureaus',
        createdAt: 'Apr 22, 2023',
        status: 'resolved',
        bureaus: ['Experian', 'Equifax', 'TransUnion'],
        laws: ['FCRA ยง 623'],
        resolvedAt: 'May 12, 2023',
        content: `Dear Credit Bureau,\n\nI am writing to dispute an incorrect balance on my Chase credit card. The current balance is reported as $8,450, but my actual balance is $4,225.\n\nPlease investigate this matter as required by the FCRA and update the information accordingly.\n\nSincerely,\n[YOUR NAME]`,
        letterContent: `Dear Credit Bureau,\n\nI am writing to dispute an incorrect balance on my Chase credit card. The current balance is reported as $8,450, but my actual balance is $4,225.\n\nPlease investigate this matter as required by the FCRA and update the information accordingly.\n\nSincerely,\n[YOUR NAME]`
      },
      {
        id: 3,
        title: 'Outdated Address Information Dispute',
        recipient: 'Equifax',
        createdAt: 'May 5, 2023',
        status: 'in-progress',
        bureaus: ['Equifax'],
        laws: ['FCRA ยง 605'],
        content: `Dear Equifax,\n\nI am writing to request that you update the address information on my credit report. My current report shows an old address that I haven't lived at for over 3 years.\n\nPlease update this information as required by the FCRA.\n\nSincerely,\n[YOUR NAME]`,
        letterContent: `Dear Equifax,\n\nI am writing to request that you update the address information on my credit report. My current report shows an old address that I haven't lived at for over 3 years.\n\nPlease update this information as required by the FCRA.\n\nSincerely,\n[YOUR NAME]`
      }
    ];
  };
  
  // Function to add a new letter
  const addLetter = (newLetter: Letter) => {
    // Ensure both content and letterContent fields are set
    if (!newLetter.letterContent && newLetter.content) {
      newLetter.letterContent = newLetter.content;
    } else if (!newLetter.content && newLetter.letterContent) {
      newLetter.content = newLetter.letterContent;
    }
    
    setLetters(prevLetters => {
      const updatedLetters = [newLetter, ...prevLetters];
      try {
        sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(updatedLetters));
        sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(newLetter));
        sessionStorage.setItem('autoGeneratedLetter', 'true');
      } catch (error) {
        console.error("[useDisputeLettersData] Error storing updated letters:", error);
      }
      return updatedLetters;
    });
    
    // Select the newly added letter
    setSelectedLetter(newLetter);
  };
  
  // Function to save changes to letters
  const updateLetters = (updatedLetters: Letter[]) => {
    // Ensure both content and letterContent fields are set for all letters
    const formattedLetters = updatedLetters.map(letter => {
      if (!letter.letterContent && letter.content) {
        letter.letterContent = letter.content;
      } else if (!letter.content && letter.letterContent) {
        letter.content = letter.letterContent;
      }
      return letter;
    });
    
    setLetters(formattedLetters);
    try {
      sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(formattedLetters));
      
      // Also update the pendingDisputeLetter if it exists
      if (formattedLetters.length > 0) {
        if (selectedLetter) {
          // Find and update the current selected letter
          const updatedSelectedLetter = formattedLetters.find(letter => letter.id === selectedLetter.id);
          if (updatedSelectedLetter) {
            setSelectedLetter(updatedSelectedLetter);
            sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(updatedSelectedLetter));
          } else {
            // If the selected letter was deleted, select the first one
            setSelectedLetter(formattedLetters[0]);
            sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(formattedLetters[0]));
          }
        } else {
          // If no letter is selected, select the first one
          setSelectedLetter(formattedLetters[0]);
          sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(formattedLetters[0]));
        }
        
        // Ensure the auto-generated flag is set
        sessionStorage.setItem('autoGeneratedLetter', 'true');
      } else {
        // If all letters were deleted, clear the selected letter
        setSelectedLetter(null);
        sessionStorage.removeItem('pendingDisputeLetter');
        sessionStorage.removeItem('autoGeneratedLetter');
      }
    } catch (error) {
      console.error("[useDisputeLettersData] Error storing updated letters:", error);
    }
  };
  
  return {
    letters,
    setLetters: updateLetters,
    addLetter,
    selectedLetter,
    setSelectedLetter,
    isLoading
  };
}
