
/**
 * Utilities for letter storage management
 */

// Letter interface
export interface Letter {
  id: number | string;
  title: string;
  bureau: string;
  accountName: string;
  accountNumber?: string;
  content: string;
  letterContent?: string; 
  createdAt: string;
  status: string;
  errorType?: string;
  recipient: string;
  bureaus: string[];
}

/**
 * Loads letters from storage
 */
export async function loadLettersFromStorage(): Promise<Letter[]> {
  try {
    console.log("Loading letters from storage");
    
    // First try to load generated dispute letters
    const generatedLetters = sessionStorage.getItem('generatedDisputeLetters');
    if (generatedLetters) {
      const parsedLetters = JSON.parse(generatedLetters);
      console.log(`Found ${parsedLetters.length} generated dispute letters`);
      
      // Normalize and return the letters
      return normalizeLetter(parsedLetters);
    }
    
    // If no generated letters, check for a pending letter
    const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
    if (pendingLetter) {
      const parsedLetter = JSON.parse(pendingLetter);
      console.log("Found pending dispute letter:", parsedLetter.title);
      
      // Normalize and return as array with single letter
      return normalizeLetter([parsedLetter]);
    }
    
    // Check for auto-generated letter
    const autoLetter = sessionStorage.getItem('autoGeneratedLetter');
    if (autoLetter) {
      const parsedLetter = JSON.parse(autoLetter);
      console.log("Found auto-generated letter:", parsedLetter.title);
      
      // Normalize and return as array with single letter
      return normalizeLetter([parsedLetter]);
    }
    
    console.log("No letters found in storage");
    return [];
  } catch (error) {
    console.error("Error loading letters from storage:", error);
    return [];
  }
}

/**
 * Saves letters to storage
 */
export async function saveLettersToStorage(letters: Letter[]): Promise<boolean> {
  try {
    if (!letters || letters.length === 0) {
      console.warn("No letters provided to save");
      return false;
    }
    
    console.log(`Saving ${letters.length} letters to storage`);
    
    // Normalize all letters to ensure they have all required fields
    const normalizedLetters = normalizeLetter(letters);
    
    // Save to storage
    sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(normalizedLetters));
    
    // Also update/add the first letter as a pending letter for compatibility
    if (normalizedLetters[0]) {
      sessionStorage.setItem('pendingDisputeLetter', JSON.stringify({
        ...normalizedLetters[0],
        status: normalizedLetters[0].status || 'ready'
      }));
    }
    
    // Set a flag to indicate we have dispute letters
    sessionStorage.setItem('hasDisputeLetters', 'true');
    
    console.log("Successfully saved letters to storage");
    return true;
  } catch (error) {
    console.error("Error saving letters to storage:", error);
    return false;
  }
}

/**
 * Adds a single letter to storage
 */
export async function addLetterToStorage(letter: Letter): Promise<boolean> {
  try {
    if (!letter) {
      console.error("No letter provided to add");
      return false;
    }
    
    console.log("Adding letter to storage:", letter.title);
    
    // Normalize the letter to ensure it has all required fields
    const normalizedLetter = formatLetterFromStorage(letter);
    
    // Get existing letters
    const existingLetters = await loadLettersFromStorage();
    
    // Add the new letter
    const updatedLetters = [...existingLetters, normalizedLetter];
    
    // Save the updated letters
    return saveLettersToStorage(updatedLetters);
  } catch (error) {
    console.error("Error adding letter to storage:", error);
    return false;
  }
}

/**
 * Normalizes letters to ensure they have all required fields
 */
export function formatLetterFromStorage(letter: any): Letter {
  // Ensure letter has required fields
  return {
    id: letter.id || Date.now(),
    title: letter.title || "Credit Report Dispute",
    bureau: letter.bureau || "Credit Bureau",
    accountName: letter.accountName || "Account in Question",
    accountNumber: letter.accountNumber || "",
    content: letter.content || letter.letterContent || "Letter content not available",
    letterContent: letter.letterContent || letter.content || "Letter content not available",
    createdAt: letter.createdAt || new Date().toLocaleDateString('en-US', {
      month: 'short', day: 'numeric', year: 'numeric'
    }),
    status: letter.status || "ready",
    errorType: letter.errorType || "General Dispute",
    recipient: letter.recipient || letter.bureau || "Credit Bureau",
    bureaus: letter.bureaus || [letter.bureau || "Credit Bureau"]
  };
}

/**
 * Normalizes an array of letters to ensure they all have required fields
 */
function normalizeLetter(letters: any[]): Letter[] {
  if (!Array.isArray(letters)) {
    console.error("Letters is not an array:", letters);
    return [];
  }
  
  return letters.map(letter => formatLetterFromStorage(letter));
}
