
import { Letter } from './sampleLettersData';

/**
 * Loads letters from session storage
 */
export const loadLettersFromStorage = (): { 
  letters: Letter[], 
  selectedLetter: Letter | null,
  foundLetters: boolean
} => {
  const generatedLettersJSON = sessionStorage.getItem('generatedDisputeLetters');
  const pendingLetterJSON = sessionStorage.getItem('pendingDisputeLetter');
  const autoGeneratedFlag = sessionStorage.getItem('autoGeneratedLetter');
  
  console.log("[loadLettersFromStorage] Auto-generated flag:", autoGeneratedFlag);
  console.log("[loadLettersFromStorage] Generated letters JSON exists:", !!generatedLettersJSON);
  console.log("[loadLettersFromStorage] Pending letter JSON exists:", !!pendingLetterJSON);
  
  let letters: Letter[] = [];
  let selectedLetter: Letter | null = null;
  let foundLetters = false;
  
  // Try to load multiple letters first
  if (generatedLettersJSON) {
    try {
      const parsedLetters = JSON.parse(generatedLettersJSON);
      console.log("[loadLettersFromStorage] Parsed generated letters:", parsedLetters);
      
      if (Array.isArray(parsedLetters) && parsedLetters.length > 0) {
        console.log(`[loadLettersFromStorage] Found ${parsedLetters.length} generated letters in session storage`);
        
        letters = parsedLetters.map((letter, index) => formatLetterFromStorage(letter, index));
        
        console.log("[loadLettersFromStorage] Formatted letters:", letters);
        
        if (letters.length > 0) {
          selectedLetter = letters[0];
          console.log("[loadLettersFromStorage] Selected first letter:", letters[0]);
        }
        
        foundLetters = true;
        return { letters, selectedLetter, foundLetters };
      }
    } catch (error) {
      console.error("[loadLettersFromStorage] Error parsing generated letters:", error);
    }
  } 
  
  // Fall back to single letter if available
  if (pendingLetterJSON) {
    try {
      const pendingLetter = JSON.parse(pendingLetterJSON);
      console.log("[loadLettersFromStorage] Found pending letter in session storage", pendingLetter);
      
      const formattedLetter = formatLetterFromStorage(pendingLetter);
      
      // Ensure letter has content
      if (!formattedLetter.content || formattedLetter.content.length < 10) {
        formattedLetter.content = generateFallbackContent(formattedLetter);
        formattedLetter.letterContent = formattedLetter.content;
      }
      
      console.log("[loadLettersFromStorage] Formatted pending letter:", formattedLetter);
      letters = [formattedLetter];
      selectedLetter = formattedLetter;
      foundLetters = true;
      
      return { letters, selectedLetter, foundLetters };
    } catch (error) {
      console.error("[loadLettersFromStorage] Error parsing pending letter:", error);
    }
  }
  
  return { letters: [], selectedLetter: null, foundLetters: false };
};

/**
 * Formats a letter object from storage
 */
export const formatLetterFromStorage = (letter: any, index: number = 0): Letter => {
  const content = letter.content || letter.letterContent || '';
  
  return {
    id: letter.id || Date.now() + index,
    title: letter.title || `${letter.errorType || 'Dispute'} (${letter.accountName || 'Account'})`,
    recipient: letter.bureau || letter.recipient || 'Credit Bureau',
    createdAt: letter.createdAt || new Date().toLocaleDateString('en-US', { 
      month: 'short', day: 'numeric', year: 'numeric' 
    }),
    status: letter.status || 'draft',
    bureaus: letter.bureaus || [letter.bureau || 'Unknown'],
    content: content,
    accountName: letter.accountName || '',
    accountNumber: letter.accountNumber || '',
    errorType: letter.errorType || 'General Dispute',
    letterContent: content,
    explanation: letter.explanation,
    bureau: letter.bureau,
    timestamp: letter.timestamp
  };
};

/**
 * Generates fallback content for a letter if needed
 */
export const generateFallbackContent = (letter: Letter): string => {
  return `
Dear ${letter.recipient},

I am writing to dispute the following information in my credit report:

Account Name: ${letter.accountName || "Unknown"}
Account Number: ${letter.accountNumber || "Unknown"}
Issue: ${letter.errorType || "Inaccurate Information"}

Under the Fair Credit Reporting Act, you are required to investigate this dispute and remove any inaccurate information.

Sincerely,
[YOUR NAME]
  `;
};

/**
 * Saves letters to session storage
 */
export const saveLettersToStorage = (
  letters: Letter[], 
  selectedLetter: Letter | null
): void => {
  try {
    // Ensure all letters have both content and letterContent fields
    const formattedLetters = letters.map(letter => {
      if (!letter.letterContent && letter.content) {
        letter.letterContent = letter.content;
      } else if (!letter.content && letter.letterContent) {
        letter.content = letter.letterContent;
      }
      return letter;
    });
    
    sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(formattedLetters));
    
    if (formattedLetters.length > 0) {
      if (selectedLetter) {
        const updatedSelectedLetter = formattedLetters.find(letter => letter.id === selectedLetter.id);
        if (updatedSelectedLetter) {
          sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(updatedSelectedLetter));
        } else {
          sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(formattedLetters[0]));
        }
      } else {
        sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(formattedLetters[0]));
      }
      
      sessionStorage.setItem('autoGeneratedLetter', 'true');
    } else {
      sessionStorage.removeItem('pendingDisputeLetter');
      sessionStorage.removeItem('autoGeneratedLetter');
    }
  } catch (error) {
    console.error("[saveLettersToStorage] Error storing updated letters:", error);
  }
};

/**
 * Adds a new letter to storage
 */
export const addLetterToStorage = (newLetter: Letter): void => {
  if (!newLetter.letterContent && newLetter.content) {
    newLetter.letterContent = newLetter.content;
  } else if (!newLetter.content && newLetter.letterContent) {
    newLetter.content = newLetter.letterContent;
  }
  
  try {
    // Get existing letters
    const existingLettersJSON = sessionStorage.getItem('generatedDisputeLetters');
    let existingLetters: Letter[] = [];
    
    if (existingLettersJSON) {
      try {
        const parsed = JSON.parse(existingLettersJSON);
        if (Array.isArray(parsed)) {
          existingLetters = parsed;
        }
      } catch (e) {
        console.error("[addLetterToStorage] Error parsing existing letters:", e);
      }
    }
    
    // Add new letter to the beginning of the array
    const updatedLetters = [newLetter, ...existingLetters];
    
    // Save back to storage
    sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(updatedLetters));
    sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(newLetter));
    sessionStorage.setItem('autoGeneratedLetter', 'true');
    
    console.log("[addLetterToStorage] Added new letter to storage:", newLetter.title);
  } catch (error) {
    console.error("[addLetterToStorage] Error adding letter to storage:", error);
  }
};
