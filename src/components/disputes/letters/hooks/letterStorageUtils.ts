
import { Letter } from './sampleLettersData';

/**
 * Load letters from session storage
 */
export const loadLettersFromStorage = (): { foundLetters: boolean, letters: Letter[], selectedLetter: Letter | null } => {
  try {
    // First check if we have "proper" generated dispute letters
    const storedLetters = sessionStorage.getItem('generatedDisputeLetters');
    if (storedLetters) {
      const parsedLetters = JSON.parse(storedLetters) as Letter[];
      console.log("Found generated dispute letters in storage:", parsedLetters.length);
      
      // If we have letters, return them
      if (parsedLetters && parsedLetters.length > 0) {
        return {
          foundLetters: true,
          letters: parsedLetters,
          selectedLetter: parsedLetters[0]
        };
      }
    }
    
    // Next check for a single pending letter (newer implementation)
    const pendingLetterString = sessionStorage.getItem('pendingDisputeLetter');
    if (pendingLetterString) {
      try {
        const pendingLetter = JSON.parse(pendingLetterString);
        console.log("Found pending dispute letter:", pendingLetter);
        
        // Format the pending letter
        const formattedLetter = formatLetterFromStorage(pendingLetter, 0);
        
        return {
          foundLetters: true,
          letters: [formattedLetter],
          selectedLetter: formattedLetter
        };
      } catch (e) {
        console.error("Error parsing pending dispute letter:", e);
      }
    }
    
    // Finally, check for auto-generated letter (older implementation)
    const autoGeneratedLetter = sessionStorage.getItem('autoGeneratedLetter');
    if (autoGeneratedLetter) {
      try {
        const letterData = JSON.parse(autoGeneratedLetter);
        console.log("Found auto-generated dispute letter:", letterData);
        
        // Format the auto-generated letter
        const formattedLetter = formatLetterFromStorage(letterData, 0);
        
        return {
          foundLetters: true,
          letters: [formattedLetter],
          selectedLetter: formattedLetter
        };
      } catch (e) {
        console.error("Error parsing auto-generated letter:", e);
      }
    }
    
    // If we get here, no letters were found
    return {
      foundLetters: false,
      letters: [],
      selectedLetter: null
    };
  } catch (error) {
    console.error("Error loading letters from storage:", error);
    return {
      foundLetters: false,
      letters: [],
      selectedLetter: null
    };
  }
};

/**
 * Save letters to session storage
 */
export const saveLettersToStorage = (letters: Letter[], selectedLetter?: Letter | null): void => {
  try {
    sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(letters));
    console.log(`Saved ${letters.length} letters to storage`);
    
    // If a letter was selected, store that as the pending letter
    if (selectedLetter) {
      sessionStorage.setItem('pendingDisputeLetter', JSON.stringify({
        ...selectedLetter,
        content: selectedLetter.content || selectedLetter.letterContent,
        letterContent: selectedLetter.letterContent || selectedLetter.content
      }));
      console.log("Saved selected letter as pending letter");
    }
  } catch (error) {
    console.error("Error saving letters to storage:", error);
  }
};

/**
 * Add a letter to storage
 */
export const addLetterToStorage = (letterData: any): Letter => {
  const newLetter = formatLetterFromStorage(letterData, Date.now());
  
  try {
    // Try to load existing letters
    const { letters } = loadLettersFromStorage();
    
    // Add the new letter
    const updatedLetters = [...letters, newLetter];
    
    // Save the updated list
    saveLettersToStorage(updatedLetters, newLetter);
    
    return newLetter;
  } catch (error) {
    console.error("Error adding letter to storage:", error);
    return newLetter;
  }
};

/**
 * Format a letter object from storage data
 */
export const formatLetterFromStorage = (data: any, fallbackId: number): Letter => {
  return {
    id: data.id || fallbackId,
    title: data.title || "Credit Report Dispute",
    bureau: data.bureau || "Credit Bureau",
    accountName: data.accountName || "Account in Question",
    accountNumber: data.accountNumber || "",
    content: data.content || data.letterContent || "No content available",
    letterContent: data.letterContent || data.content || "No content available",
    createdAt: data.createdAt || new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
    status: data.status || "ready",
    errorType: data.errorType || "General Dispute",
    // Add missing required properties for Letter type
    recipient: data.recipient || "Credit Bureau",
    bureaus: data.bureaus || [data.bureau || "Credit Bureau"]
  };
};
