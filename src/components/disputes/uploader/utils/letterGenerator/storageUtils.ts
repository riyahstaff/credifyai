
/**
 * Storage utilities for generated letters
 */
import { DisputeLetter } from './types';

/**
 * Store generated letters in session storage
 */
export const storeGeneratedLetters = (letters: DisputeLetter[]): boolean => {
  try {
    // Format letters to ensure they have proper fields
    const formattedLetters = letters.map((letter, index) => ({
      ...letter,
      id: letter.id || Date.now() + index,
      title: letter.title || `${letter.errorType || 'Dispute'} (${letter.accountName || 'Account'})`,
      content: letter.letterContent || letter.content,
      status: letter.status || 'draft',
      bureaus: letter.bureaus || [letter.bureau || 'Unknown'],
      createdAt: letter.createdAt || new Date().toLocaleDateString('en-US', { 
        month: 'short', day: 'numeric', year: 'numeric' 
      }),
      laws: letter.laws || ["FCRA ยง 611"]
    }));
    
    // Store all letters in session storage with clear logging
    console.log(`Storing ${formattedLetters.length} generated letters in session storage:`, formattedLetters);
    sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(formattedLetters));
    
    // Also store the first letter for quick access
    if (formattedLetters.length > 0) {
      console.log(`Storing first letter in pendingDisputeLetter: ${formattedLetters[0].title}`);
      sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(formattedLetters[0]));
      sessionStorage.setItem('autoGeneratedLetter', 'true');
      console.log("Set autoGeneratedLetter flag to true");
    }
    
    return true;
  } catch (error) {
    console.error("Error storing generated letters:", error);
    return false;
  }
};
