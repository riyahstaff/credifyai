
import { CreditReportAccount, CreditReportData } from '@/utils/creditReportParser';
import { verifyLetterStorage, forceNavigateToLetters } from './bureauUtils';
import { NavigateFunction } from 'react-router-dom';
import { toast as toastFunction } from '@/hooks/use-toast';

/**
 * Stores generated letters in session storage
 */
export const storeGeneratedLetters = (letters: any[]) => {
  try {
    const formattedLetters = letters.map(letter => {
      if (letter.content && !letter.letterContent) {
        letter.letterContent = letter.content;
      } else if (letter.letterContent && !letter.content) {
        letter.content = letter.letterContent;
      }
      
      if (!letter.bureaus && letter.bureau) {
        letter.bureaus = [letter.bureau];
      }
      
      if (!letter.status) {
        letter.status = 'draft';
      }
      
      if (!letter.createdAt) {
        letter.createdAt = new Date().toLocaleDateString('en-US', { 
          month: 'short', day: 'numeric', year: 'numeric' 
        });
      }
      
      return letter;
    });
    
    console.log(`Storing ${formattedLetters.length} formatted letters:`, formattedLetters);
    sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(formattedLetters));
    
    if (formattedLetters.length > 0) {
      sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(formattedLetters[0]));
    }
    
    sessionStorage.setItem('autoGeneratedLetter', 'true');
    sessionStorage.setItem('forceLettersReload', 'true');
    
    verifyLetterStorage();
    
    return true;
  } catch (error) {
    console.error("Error storing letters:", error);
    return false;
  }
};

/**
 * Creates a fallback letter when letter generation fails
 */
export const createFallbackLetter = (isError: boolean = false) => {
  const letterType = isError ? "Basic Dispute Letter" : "Credit Dispute Letter";
  return {
    id: Date.now(),
    title: letterType,
    recipient: "Credit Bureau",
    bureau: "Experian",
    createdAt: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
    status: 'draft',
    bureaus: ["Experian"],
    content: isError
      ? `
Dear Credit Bureau,

I am writing to dispute information in my credit report. 

Under the Fair Credit Reporting Act (FCRA), you are required to investigate this matter and remove any inaccurate information.

Sincerely,
[YOUR NAME]
      `
      : `
Dear Credit Bureau,

I am writing to dispute information in my credit report that I believe to be inaccurate. Under the Fair Credit Reporting Act (FCRA), I request that you investigate the following items and remove any inaccurate information.

The items I am disputing include:

1. Account information that is inaccurate
2. Late payments that I believe are incorrectly reported
3. Credit inquiries that I did not authorize

Please investigate these matters and update my credit report accordingly.

Sincerely,
[YOUR NAME]
      `,
    accountName: isError ? "Error Recovery" : "General Dispute",
    accountNumber: "",
    errorType: isError ? "General Dispute" : "Multiple Issues",
    letterContent: isError
      ? `
Dear Credit Bureau,

I am writing to dispute information in my credit report. 

Under the Fair Credit Reporting Act (FCRA), you are required to investigate this matter and remove any inaccurate information.

Sincerely,
[YOUR NAME]
      `
      : `
Dear Credit Bureau,

I am writing to dispute information in my credit report that I believe to be inaccurate. Under the Fair Credit Reporting Act (FCRA), I request that you investigate the following items and remove any inaccurate information.

The items I am disputing include:

1. Account information that is inaccurate
2. Late payments that I believe are incorrectly reported
3. Credit inquiries that I did not authorize

Please investigate these matters and update my credit report accordingly.

Sincerely,
[YOUR NAME]
      `
  };
};

/**
 * Handles errors in letter generation by creating a fallback letter
 */
export const handleLetterGenerationError = (
  error: any, 
  toastFn: typeof toastFunction, 
  navigate: NavigateFunction
) => {
  console.error("Error generating letter:", error);
  
  const errorFallbackLetter = createFallbackLetter(true);
  const letters = [errorFallbackLetter];
  const stored = storeGeneratedLetters(letters);
  
  toastFn({
    title: "Error Recovery",
    description: "There was an error generating detailed letters, but we've created a basic letter for you.",
    variant: "destructive",
  });
  
  // Add a delay before navigation to ensure storage operations complete
  setTimeout(() => {
    forceNavigateToLetters(navigate);
  }, 300);
};
