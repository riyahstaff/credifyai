
import { NavigateFunction } from 'react-router-dom';

/**
 * Determine the most likely bureau based on input string
 */
export const determineBureau = (input: string): string => {
  const lowered = input.toLowerCase();
  
  if (lowered.includes('experian')) {
    return 'Experian';
  }
  
  if (lowered.includes('equifax')) {
    return 'Equifax';
  }
  
  if (lowered.includes('transunion') || lowered.includes('trans union')) {
    return 'TransUnion';
  }
  
  // Default to Experian if no match
  return 'Experian';
};

/**
 * Get the appropriate address for a credit bureau
 */
export const getBureauAddress = (bureau: string): string => {
  switch (bureau) {
    case 'Experian':
      return "P.O. Box 4500\nAllen, TX 75013";
    case 'Equifax':
      return "P.O. Box 740256\nAtlanta, GA 30374";
    case 'TransUnion':
      return "P.O. Box 2000\nChester, PA 19016";
    default:
      return "P.O. Box 4500\nAllen, TX 75013"; // Default to Experian
  }
};

/**
 * Store a generated letter in session storage
 */
export const storeLetterInStorage = (letter: any) => {
  try {
    console.log("Storing letter in session storage:", letter);
    
    // Make sure letter has both content fields
    if (letter.content && !letter.letterContent) {
      letter.letterContent = letter.content;
    } else if (letter.letterContent && !letter.content) {
      letter.content = letter.letterContent;
    }
    
    // Store as pending letter
    sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(letter));
    
    // Also store in generated letters array
    const existingLettersJSON = sessionStorage.getItem('generatedDisputeLetters');
    let letters = [];
    
    if (existingLettersJSON) {
      try {
        letters = JSON.parse(existingLettersJSON);
      } catch (e) {
        console.error("Error parsing existing letters:", e);
      }
    }
    
    // Add letter to array if not already there
    if (!Array.isArray(letters)) {
      letters = [];
    }
    
    letters.push(letter);
    
    sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(letters));
    sessionStorage.setItem('autoGeneratedLetter', 'true');
    
    return true;
  } catch (error) {
    console.error("Error storing letter:", error);
    return false;
  }
};

/**
 * Verify if letters exist in storage and are correctly formatted
 */
export const verifyLetterStorage = (): boolean => {
  const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
  const generatedLetters = sessionStorage.getItem('generatedDisputeLetters');
  const autoGenerated = sessionStorage.getItem('autoGeneratedLetter');
  
  console.log("Verifying letter storage:");
  console.log("- pendingDisputeLetter exists:", !!pendingLetter);
  console.log("- generatedDisputeLetters exists:", !!generatedLetters);
  console.log("- autoGeneratedLetter flag:", autoGenerated);
  
  if (pendingLetter || generatedLetters) {
    console.log("Letter verified in storage, navigating to dispute letters page");
    return true;
  }
  
  return false;
};

/**
 * Force navigation to letters page
 */
export const forceNavigateToLetters = (navigate: NavigateFunction, testMode: boolean = false): void => {
  console.log("Force navigating to dispute letters page");
  
  // Make sure we have a comprehensive letter before navigation
  try {
    console.log("Creating comprehensive letter before navigation");
    const fallbackLetter = {
      id: Date.now(),
      title: "Comprehensive Dispute Letter",
      recipient: "Credit Bureau",
      bureau: "Experian",
      accountName: "Multiple Accounts",
      accountNumber: "",
      errorType: "Multiple Issues",
      content: "This is a comprehensive dispute letter addressing various issues in your credit report.",
      letterContent: "This is a comprehensive dispute letter addressing various issues in your credit report.",
      status: 'draft',
      createdAt: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
      bureaus: ["Experian", "Equifax", "TransUnion"],
      laws: ["FCRA ยง 611"]
    };
    
    // Ensure we have at least one letter
    const existingLetter = sessionStorage.getItem('pendingDisputeLetter');
    if (!existingLetter) {
      sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(fallbackLetter));
      
      // Also add to generated letters
      sessionStorage.setItem('generatedDisputeLetters', JSON.stringify([fallbackLetter]));
      sessionStorage.setItem('autoGeneratedLetter', 'true');
      sessionStorage.setItem('forceLettersReload', 'true');
    }
    
    console.log("Created and stored comprehensive letter before navigation");
  } catch (e) {
    console.error("Error creating fallback letter:", e);
  }
  
  console.log("Forcefully navigating to dispute letters page");
  
  // Use multiple navigation methods for redundancy
  const path = testMode ? '/dispute-letters?testMode=true' : '/dispute-letters';
  
  navigate(path);
  
  // As a backup, also use window.location after a short delay
  setTimeout(() => {
    window.location.href = path;
  }, 500);
};
