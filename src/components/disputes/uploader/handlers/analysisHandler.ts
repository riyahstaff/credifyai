import { useToast } from '@/hooks/use-toast';
import { processCreditReport } from '@/utils/creditReportParser';
import { identifyIssues } from '@/utils/reportAnalysis';
import { AnalysisHandlerProps } from '../types/analysisTypes';
import { ensureMinimumIssues } from '../utils/issueGenerator';
import { generateDisputeLetters } from '../utils/letterGenerator';
import { storeReportData } from '../utils/reportStorage';
import { createFallbackLetter } from './fallbackLetterCreator';
import { storeGeneratedLetters } from '../utils/disputeLetterHelpers';

/**
 * Main handler function for processing credit report analysis
 */
export const handleAnalysisComplete = async ({
  uploadedFile,
  setReportData,
  setIssues,
  setLetterGenerated,
  setAnalysisError,
  setAnalyzing,
  setAnalyzed,
  toast
}: AnalysisHandlerProps) => {
  console.log("handleAnalysisComplete called");
  
  try {
    setAnalyzing(true);
    
    if (!uploadedFile) {
      console.error("No file available for analysis");
      setAnalysisError("No file was available for analysis");
      setAnalyzing(false);
      setAnalyzed(true);
      return;
    }
    
    // Process the credit report
    console.log("Processing credit report:", uploadedFile.name);
    const data = await processCreditReport(uploadedFile);
    
    if (!data) {
      throw new Error("Failed to process credit report data");
    }
    
    // Store the report data
    setReportData(data);
    storeReportData(data);
    
    // Identify issues in the report
    console.log("Identifying issues in report data");
    let detectedIssues = identifyIssues(data);
    detectedIssues = ensureMinimumIssues(detectedIssues, 3);
    
    console.log(`Found ${detectedIssues.length} potential issues:`, detectedIssues);
    setIssues(detectedIssues);
    
    // Generate dispute letters
    console.log(`Generating dispute letters for ${detectedIssues.length} issues`);
    const generatedLetters = await generateDisputeLetters(detectedIssues, data);
    
    if (generatedLetters && generatedLetters.length > 0) {
      console.log(`Generated ${generatedLetters.length} dispute letters successfully`);
      setLetterGenerated(true);
      sessionStorage.setItem('autoGeneratedLetter', 'true');
      
      toast.toast({
        title: "Dispute letters generated",
        description: `${generatedLetters.length} dispute letters have been created and are ready for review.`,
      });
    } else {
      console.warn("No letters were generated");
      
      // Create a fallback letter if no letters were generated
      const fallbackLetter = createFallbackLetter(data);
      storeGeneratedLetters([fallbackLetter]);
      setLetterGenerated(true);
      
      toast.toast({
        title: "Fallback dispute letter generated",
        description: "We created a basic dispute letter since we couldn't generate specific letters for the issues found.",
      });
    }
    
    setAnalyzing(false);
    setAnalyzed(true);
    
    // Force navigation by logging this special message 
    console.log("ANALYSIS_COMPLETE_READY_FOR_NAVIGATION");
    
  } catch (error) {
    console.error("Error analyzing report:", error);
    setAnalysisError(error instanceof Error ? error.message : "Unknown error processing report");
    setAnalyzing(false);
    setAnalyzed(true);
    
    toast.toast({
      title: "Analysis failed",
      description: error instanceof Error ? error.message : "Failed to process your credit report.",
      variant: "destructive",
    });
  }
};
