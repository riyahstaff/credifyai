import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Check, FileCheck, Upload } from 'lucide-react';
import { CreditReportData, CreditReportAccount } from '@/utils/creditReportParser';
import CreditReportIssue from './CreditReportIssue';
import { APP_ROUTES } from '@/lib/supabase';
import { useToast } from '@/hooks/use-toast';
import { generateDisputeLetters } from './utils/letterGenerator';

interface ReportAnalysisResultsProps {
  issues: Array<{
    type: string;
    title: string;
    description: string;
    impact: 'High Impact' | 'Critical Impact' | 'Medium Impact';
    impactColor: string;
    account?: CreditReportAccount;
    laws: string[];
  }>;
  reportData: CreditReportData | null;
  onResetUpload: () => void;
  onGenerateDispute: (account?: CreditReportAccount) => void;
}

const ReportAnalysisResults: React.FC<ReportAnalysisResultsProps> = ({
  issues,
  reportData,
  onResetUpload,
  onGenerateDispute
}) => {
  const navigate = useNavigate();
  const { toast } = useToast();
  
  const storeGeneratedLetters = (letters) => {
    try {
      const formattedLetters = letters.map(letter => {
        if (letter.content && !letter.letterContent) {
          letter.letterContent = letter.content;
        } else if (letter.letterContent && !letter.content) {
          letter.content = letter.letterContent;
        }
        
        if (!letter.bureaus && letter.bureau) {
          letter.bureaus = [letter.bureau];
        }
        
        if (!letter.status) {
          letter.status = 'draft';
        }
        
        if (!letter.createdAt) {
          letter.createdAt = new Date().toLocaleDateString('en-US', { 
            month: 'short', day: 'numeric', year: 'numeric' 
          });
        }
        
        return letter;
      });
      
      console.log(`Storing ${formattedLetters.length} formatted letters:`, formattedLetters);
      sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(formattedLetters));
      
      if (formattedLetters.length > 0) {
        sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(formattedLetters[0]));
      }
      
      sessionStorage.setItem('autoGeneratedLetter', 'true');
      sessionStorage.setItem('forceLettersReload', 'true');
      
      const storedLetters = sessionStorage.getItem('generatedDisputeLetters');
      const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
      const autoFlag = sessionStorage.getItem('autoGeneratedLetter');
      const forceReload = sessionStorage.getItem('forceLettersReload');
      
      console.log("Storage verification:");
      console.log("- autoGeneratedLetter:", autoFlag);
      console.log("- pendingDisputeLetter exists:", !!pendingLetter);
      console.log("- generatedDisputeLetters exists:", !!storedLetters);
      console.log("- forceLettersReload:", forceReload);
      
      return true;
    } catch (error) {
      console.error("Error storing letters:", error);
      return false;
    }
  };
  
  const handleGenerateAllLetters = async () => {
    if (reportData) {
      sessionStorage.removeItem('pendingDisputeLetter');
      sessionStorage.removeItem('generatedDisputeLetters');
      sessionStorage.removeItem('autoGeneratedLetter');
      sessionStorage.removeItem('forceLettersReload');
      
      sessionStorage.setItem('creditReportData', JSON.stringify(reportData));
      
      toast({
        title: "Generating letters",
        description: "Creating dispute letters for all identified issues",
      });
      
      try {
        console.log("Generating dispute letters for all issues");
        const generatedLetters = await generateDisputeLetters(issues, reportData);
        
        if (generatedLetters && generatedLetters.length > 0) {
          console.log(`Successfully generated ${generatedLetters.length} dispute letters`);
          
          const stored = storeGeneratedLetters(generatedLetters);
          
          if (stored) {
            toast({
              title: "Letters Generated",
              description: `${generatedLetters.length} dispute letters have been created and are ready for review.`,
            });
            
            setTimeout(() => {
              navigate('/dispute-letters');
            }, 800);
          } else {
            throw new Error("Failed to store generated letters");
          }
        } else {
          console.warn("No letters were generated, creating a fallback letter");
          
          const fallbackLetter = {
            id: Date.now(),
            title: "Credit Dispute Letter",
            recipient: "Credit Bureau",
            bureau: "Experian",
            createdAt: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
            status: 'draft',
            bureaus: ["Experian"],
            content: `
Dear Credit Bureau,

I am writing to dispute information in my credit report that I believe to be inaccurate. Under the Fair Credit Reporting Act (FCRA), I request that you investigate the following items and remove any inaccurate information.

The items I am disputing include:

1. Account information that is inaccurate
2. Late payments that I believe are incorrectly reported
3. Credit inquiries that I did not authorize

Please investigate these matters and update my credit report accordingly.

Sincerely,
[YOUR NAME]
            `,
            accountName: "General Dispute",
            accountNumber: "",
            errorType: "Multiple Issues",
            letterContent: `
Dear Credit Bureau,

I am writing to dispute information in my credit report that I believe to be inaccurate. Under the Fair Credit Reporting Act (FCRA), I request that you investigate the following items and remove any inaccurate information.

The items I am disputing include:

1. Account information that is inaccurate
2. Late payments that I believe are incorrectly reported
3. Credit inquiries that I did not authorize

Please investigate these matters and update my credit report accordingly.

Sincerely,
[YOUR NAME]
            `
          };
          
          const letters = [fallbackLetter];
          const stored = storeGeneratedLetters(letters);
          
          if (stored) {
            toast({
              title: "Simple Letter Created",
              description: "We've created a basic dispute letter for you to review and customize.",
            });
            
            setTimeout(() => {
              navigate('/dispute-letters');
            }, 800);
          } else {
            throw new Error("Failed to store fallback letter");
          }
        }
      } catch (error) {
        console.error("Error generating dispute letters:", error);
        
        const errorFallbackLetter = {
          id: Date.now(),
          title: "Basic Dispute Letter",
          recipient: "Credit Bureau",
          bureau: "Experian",
          createdAt: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
          status: 'draft',
          bureaus: ["Experian"],
          content: `
Dear Credit Bureau,

I am writing to dispute information in my credit report. 

Under the Fair Credit Reporting Act (FCRA), you are required to investigate this matter and remove any inaccurate information.

Sincerely,
[YOUR NAME]
          `,
          accountName: "Error Recovery",
          accountNumber: "",
          errorType: "General Dispute",
          letterContent: `
Dear Credit Bureau,

I am writing to dispute information in my credit report. 

Under the Fair Credit Reporting Act (FCRA), you are required to investigate this matter and remove any inaccurate information.

Sincerely,
[YOUR NAME]
          `
        };
        
        const letters = [errorFallbackLetter];
        storeGeneratedLetters(letters);
        
        toast({
          title: "Error Recovery",
          description: "There was an error generating detailed letters, but we've created a basic letter for you.",
          variant: "destructive",
        });
        
        setTimeout(() => {
          navigate('/dispute-letters');
        }, 800);
      }
    } else {
      toast({
        title: "Error generating letters",
        description: "No report data available. Please try uploading your report again.",
        variant: "destructive"
      });
    }
  };
  
  const handleSingleIssueDispute = async (issueIndex: number, account?: CreditReportAccount) => {
    console.log(`Generating dispute for issue #${issueIndex} with account:`, account);
    
    toast({
      title: "Generating letter",
      description: "Creating dispute letter for selected issue",
    });
    
    if (reportData) {
      try {
        sessionStorage.removeItem('pendingDisputeLetter');
        sessionStorage.removeItem('generatedDisputeLetters');
        sessionStorage.removeItem('autoGeneratedLetter');
        sessionStorage.removeItem('forceLettersReload');
        
        sessionStorage.setItem('creditReportData', JSON.stringify(reportData));
        
        const targetIssue = issues[issueIndex];
        if (!targetIssue) {
          throw new Error("Selected issue not found");
        }
        
        console.log("Generating letter for issue:", targetIssue.title);
        
        const singleIssueArray = [targetIssue];
        
        const generatedLetters = await generateDisputeLetters(singleIssueArray, reportData);
        
        if (generatedLetters && generatedLetters.length > 0) {
          console.log("Successfully generated letter for selected issue");
          
          const stored = storeGeneratedLetters(generatedLetters);
          
          if (stored) {
            toast({
              title: "Letter Generated",
              description: "Your dispute letter is ready for review.",
            });
            
            setTimeout(() => {
              navigate('/dispute-letters');
            }, 800);
          } else {
            throw new Error("Failed to store generated letter");
          }
        } else {
          throw new Error("No letter was generated");
        }
      } catch (error) {
        console.error("Error generating letter:", error);
        
        const recoveryLetter = {
          id: Date.now(),
          title: "Credit Dispute Letter",
          recipient: "Credit Bureau",
          bureau: "Experian",
          createdAt: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
          status: 'draft',
          bureaus: ["Experian"],
          laws: ["FCRA § 611", "FCRA § 623"],
          content: `
Dear Credit Bureau,

I am writing to dispute information in my credit report. 

Under the Fair Credit Reporting Act (FCRA), you are required to investigate this matter and remove any inaccurate information.

Sincerely,
[YOUR NAME]
          `,
          accountName: "Error Recovery",
          accountNumber: "",
          errorType: "General Dispute",
          letterContent: `
Dear Credit Bureau,

I am writing to dispute information in my credit report. 

Under the Fair Credit Reporting Act (FCRA), you are required to investigate this matter and remove any inaccurate information.

Sincerely,
[YOUR NAME]
          `
        };
        
        const letters = [recoveryLetter];
        storeGeneratedLetters(letters);
        
        toast({
          title: "Error Recovery",
          description: "There was an error, but we've created a basic letter for you.",
          variant: "destructive",
        });
        
        setTimeout(() => {
          navigate('/dispute-letters');
        }, 800);
      }
    } else {
      toast({
        title: "Error generating letter",
        description: "No report data available. Please try uploading your report again.",
        variant: "destructive"
      });
    }
  };
  
  return (
    <div>
      <div className="flex items-center justify-center gap-2 mb-8">
        <div className="w-12 h-12 rounded-full bg-green-100 dark:bg-green-900/30 flex items-center justify-center">
          <Check className="text-green-600 dark:text-green-400" size={24} />
        </div>
        <h3 className="text-xl font-semibold text-credify-navy dark:text-white">
          Analysis Complete
        </h3>
      </div>
      
      <div className="bg-credify-teal/5 border border-credify-teal/20 rounded-lg p-4 mb-8">
        <div className="flex items-center gap-2 mb-2">
          <FileCheck className="text-credify-teal" size={20} />
          <p className="font-medium text-credify-navy dark:text-white">AI Found {issues.length} Potential {issues.length === 1 ? 'Issue' : 'Issues'}</p>
        </div>
        <p className="text-credify-navy-light dark:text-white/70 text-sm">
          {issues.length > 0 
            ? `Our AI has identified ${issues.length} potential ${issues.length === 1 ? 'issue' : 'issues'} in your credit report that could ${issues.length === 1 ? 'be negatively impacting' : 'negatively impact'} your score. Review the findings below and generate dispute letters.`
            : 'Our AI did not detect any obvious issues in your credit report. However, you may still want to review it carefully for any inaccuracies.'}
        </p>
      </div>
      
      <div className="space-y-6 mb-8">
        <h3 className="text-lg font-semibold text-credify-navy dark:text-white border-b border-gray-200 dark:border-gray-700/30 pb-2">
          Identified Issues
        </h3>
        
        {issues.length > 0 ? (
          issues.map((issue, index) => (
            <CreditReportIssue
              key={index}
              title={issue.title}
              description={issue.description}
              impact={issue.impact}
              impactColor={issue.impactColor}
              account={issue.account}
              laws={issue.laws}
              onGenerateDispute={() => handleSingleIssueDispute(index, issue.account)}
            />
          ))
        ) : (
          <div className="bg-white dark:bg-credify-navy/40 border border-gray-100 dark:border-gray-700/30 rounded-lg p-5 text-center">
            <p className="text-credify-navy-light dark:text-white/70">
              No issues were detected in your credit report. This could mean your report is accurate or our system couldn't identify any obvious problems.
            </p>
            <p className="text-credify-navy-light dark:text-white/70 mt-2">
              You may still want to review your report manually for any inaccuracies.
            </p>
          </div>
        )}
      </div>
      
      <div className="flex justify-center gap-4">
        <button
          onClick={onResetUpload}
          className="btn-outline flex items-center gap-1"
        >
          <Upload size={18} />
          <span>Upload New Report</span>
        </button>
        
        <button
          onClick={handleGenerateAllLetters}
          className="btn-primary flex items-center gap-1"
        >
          <FileCheck size={18} />
          <span>Generate All Letters</span>
        </button>
      </div>
    </div>
  );
};

export default ReportAnalysisResults;
