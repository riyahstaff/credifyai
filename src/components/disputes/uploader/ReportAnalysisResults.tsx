
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Check, FileCheck, Upload } from 'lucide-react';
import { CreditReportData, CreditReportAccount } from '@/utils/creditReportParser';
import CreditReportIssue from './CreditReportIssue';
import { APP_ROUTES } from '@/lib/supabase';
import { useToast } from '@/hooks/use-toast';
import { generateDisputeLetters } from './utils/letterGenerator';

interface ReportAnalysisResultsProps {
  issues: Array<{
    type: string;
    title: string;
    description: string;
    impact: 'High Impact' | 'Critical Impact' | 'Medium Impact';
    impactColor: string;
    account?: CreditReportAccount;
    laws: string[];
  }>;
  reportData: CreditReportData | null;
  onResetUpload: () => void;
  onGenerateDispute: (account?: CreditReportAccount) => void;
}

const ReportAnalysisResults: React.FC<ReportAnalysisResultsProps> = ({
  issues,
  reportData,
  onResetUpload,
  onGenerateDispute
}) => {
  const navigate = useNavigate();
  const { toast } = useToast();
  
  const storeGeneratedLetters = (letters) => {
    try {
      // Ensure all letters have required properties
      const formattedLetters = letters.map(letter => {
        // Make sure content and letterContent are the same
        if (letter.content && !letter.letterContent) {
          letter.letterContent = letter.content;
        } else if (letter.letterContent && !letter.content) {
          letter.content = letter.letterContent;
        }
        
        // Ensure other required fields exist
        if (!letter.bureaus && letter.bureau) {
          letter.bureaus = [letter.bureau];
        }
        
        if (!letter.status) {
          letter.status = 'draft';
        }
        
        if (!letter.createdAt) {
          letter.createdAt = new Date().toLocaleDateString('en-US', { 
            month: 'short', day: 'numeric', year: 'numeric' 
          });
        }
        
        return letter;
      });
      
      // Store all formatted letters
      console.log(`Storing ${formattedLetters.length} formatted letters:`, formattedLetters);
      sessionStorage.setItem('generatedDisputeLetters', JSON.stringify(formattedLetters));
      
      // Store the first letter separately for quick access
      if (formattedLetters.length > 0) {
        sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(formattedLetters[0]));
      }
      
      // Set the auto-generated flag
      sessionStorage.setItem('autoGeneratedLetter', 'true');
      
      // Force a reload of the dispute letters page when we navigate to it
      sessionStorage.setItem('forceLettersReload', 'true');
      
      // Verify everything was stored correctly
      const storedLetters = sessionStorage.getItem('generatedDisputeLetters');
      const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
      const autoFlag = sessionStorage.getItem('autoGeneratedLetter');
      const forceReload = sessionStorage.getItem('forceLettersReload');
      
      console.log("Storage verification:");
      console.log("- autoGeneratedLetter:", autoFlag);
      console.log("- pendingDisputeLetter exists:", !!pendingLetter);
      console.log("- generatedDisputeLetters exists:", !!storedLetters);
      console.log("- forceLettersReload:", forceReload);
      
      return true;
    } catch (error) {
      console.error("Error storing letters:", error);
      return false;
    }
  };
  
  const handleGenerateAllLetters = async () => {
    if (reportData) {
      // Clear any existing letters to prevent confusion
      sessionStorage.removeItem('pendingDisputeLetter');
      sessionStorage.removeItem('generatedDisputeLetters');
      sessionStorage.removeItem('autoGeneratedLetter');
      sessionStorage.removeItem('forceLettersReload');
      
      // Store the report data in session storage
      sessionStorage.setItem('creditReportData', JSON.stringify(reportData));
      
      // Show toast
      toast({
        title: "Generating letters",
        description: "Creating dispute letters for all identified issues",
      });
      
      try {
        // Generate letters directly
        console.log("Generating dispute letters for all issues");
        const generatedLetters = await generateDisputeLetters(issues, reportData);
        
        if (generatedLetters && generatedLetters.length > 0) {
          console.log(`Successfully generated ${generatedLetters.length} dispute letters`);
          
          // Store the generated letters
          const stored = storeGeneratedLetters(generatedLetters);
          
          if (stored) {
            // Success toast
            toast({
              title: "Letters Generated",
              description: `${generatedLetters.length} dispute letters have been created and are ready for review.`,
            });
            
            // Wait to ensure storage operations complete
            setTimeout(() => {
              navigate('/dispute-letters');
            }, 800);
          } else {
            throw new Error("Failed to store generated letters");
          }
        } else {
          console.warn("No letters were generated, creating a fallback letter");
          
          // Create a simple fallback letter
          const fallbackLetter = {
            id: Date.now(),
            title: "Credit Dispute Letter",
            recipient: "Credit Bureau",
            bureau: "Experian",
            createdAt: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
            status: 'draft',
            bureaus: ["Experian"],
            content: `
Dear Credit Bureau,

I am writing to dispute information in my credit report that I believe to be inaccurate. Under the Fair Credit Reporting Act (FCRA), I request that you investigate the following items and remove any inaccurate information.

The items I am disputing include:

1. Account information that is inaccurate
2. Late payments that I believe are incorrectly reported
3. Credit inquiries that I did not authorize

Please investigate these matters and update my credit report accordingly.

Sincerely,
[YOUR NAME]
            `,
            accountName: "General Dispute",
            accountNumber: "",
            errorType: "Multiple Issues",
            letterContent: `
Dear Credit Bureau,

I am writing to dispute information in my credit report that I believe to be inaccurate. Under the Fair Credit Reporting Act (FCRA), I request that you investigate the following items and remove any inaccurate information.

The items I am disputing include:

1. Account information that is inaccurate
2. Late payments that I believe are incorrectly reported
3. Credit inquiries that I did not authorize

Please investigate these matters and update my credit report accordingly.

Sincerely,
[YOUR NAME]
            `
          };
          
          // Store the fallback letter
          const letters = [fallbackLetter];
          const stored = storeGeneratedLetters(letters);
          
          if (stored) {
            toast({
              title: "Simple Letter Created",
              description: "We've created a basic dispute letter for you to review and customize.",
            });
            
            // Navigate after a delay
            setTimeout(() => {
              navigate('/dispute-letters');
            }, 800);
          } else {
            throw new Error("Failed to store fallback letter");
          }
        }
      } catch (error) {
        console.error("Error generating dispute letters:", error);
        
        // Create a fallback letter even in case of errors
        const errorFallbackLetter = {
          id: Date.now(),
          title: "Basic Dispute Letter",
          recipient: "Credit Bureau",
          bureau: "Experian",
          createdAt: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
          status: 'draft',
          bureaus: ["Experian"],
          content: `
Dear Credit Bureau,

I am writing to dispute information in my credit report. 

Under the Fair Credit Reporting Act (FCRA), you are required to investigate this matter and remove any inaccurate information.

Sincerely,
[YOUR NAME]
          `,
          accountName: "Error Recovery",
          accountNumber: "",
          errorType: "General Dispute",
          letterContent: `
Dear Credit Bureau,

I am writing to dispute information in my credit report. 

Under the Fair Credit Reporting Act (FCRA), you are required to investigate this matter and remove any inaccurate information.

Sincerely,
[YOUR NAME]
          `
        };
        
        // Store the fallback letter
        const letters = [errorFallbackLetter];
        storeGeneratedLetters(letters);
        
        toast({
          title: "Error Recovery",
          description: "There was an error generating detailed letters, but we've created a basic letter for you.",
          variant: "destructive",
        });
        
        // Navigate after a delay
        setTimeout(() => {
            navigate('/dispute-letters');
        }, 800);
      }
    } else {
      toast({
        title: "Error generating letters",
        description: "No report data available. Please try uploading your report again.",
        variant: "destructive"
      });
    }
  };
  
  const handleSingleIssueDispute = async (issueIndex: number, account?: CreditReportAccount) => {
    console.log(`Generating dispute for issue #${issueIndex} with account:`, account);
    
    toast({
      title: "Generating letter",
      description: "Creating dispute letter for selected issue",
    });
    
    if (reportData) {
      try {
        // Clear any existing letters to prevent confusion
        sessionStorage.removeItem('pendingDisputeLetter');
        sessionStorage.removeItem('generatedDisputeLetters');
        sessionStorage.removeItem('autoGeneratedLetter');
        sessionStorage.removeItem('forceLettersReload');
        
        // Store the report data
        sessionStorage.setItem('creditReportData', JSON.stringify(reportData));
        
        // Find the specific issue
        const targetIssue = issues[issueIndex];
        if (!targetIssue) {
          throw new Error("Selected issue not found");
        }
        
        console.log("Generating letter for issue:", targetIssue.title);
        
        // Create a letter directly without waiting for the complex generation
        const directLetter = {
          id: Date.now(),
          title: `${targetIssue.title} (${account?.accountName || 'Credit Report'})`,
          recipient: "Experian",
          bureau: "Experian",
          createdAt: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
          status: 'draft',
          bureaus: ["Experian"],
          content: `
Dear Credit Bureau,

I am writing to dispute the following information in my credit report:

Issue: ${targetIssue.title}
${account ? `Account Name: ${account.accountName || "Unknown"}` : ''}
${account ? `Account Number: ${account.accountNumber || "Unknown"}` : ''}

Description: ${targetIssue.description}

This information is inaccurate and is negatively affecting my credit score. Under the Fair Credit Reporting Act (FCRA), you are required to investigate this dispute and remove any inaccurate information.

Laws Applicable: ${targetIssue.laws.join(', ')}

Please investigate this matter and correct my credit report accordingly.

Sincerely,
[YOUR NAME]
          `,
          accountName: account?.accountName || targetIssue.title,
          accountNumber: account?.accountNumber || "",
          errorType: targetIssue.title,
          letterContent: `
Dear Credit Bureau,

I am writing to dispute the following information in my credit report:

Issue: ${targetIssue.title}
${account ? `Account Name: ${account.accountName || "Unknown"}` : ''}
${account ? `Account Number: ${account.accountNumber || "Unknown"}` : ''}

Description: ${targetIssue.description}

This information is inaccurate and is negatively affecting my credit score. Under the Fair Credit Reporting Act (FCRA), you are required to investigate this dispute and remove any inaccurate information.

Laws Applicable: ${targetIssue.laws.join(', ')}

Please investigate this matter and correct my credit report accordingly.

Sincerely,
[YOUR NAME]
          `
        };
        
        // Store the letter using our helper function
        const letters = [directLetter];
        const stored = storeGeneratedLetters(letters);
        
        if (stored) {
          console.log("Direct letter created and stored:", directLetter);
          
          toast({
            title: "Letter Generated",
            description: "Your dispute letter is ready for review.",
          });
          
          // Navigate after a longer delay to ensure storage completes
          setTimeout(() => {
            navigate('/dispute-letters');
          }, 800);
        } else {
          throw new Error("Failed to store direct letter");
        }
      } catch (error) {
        console.error("Error generating letter:", error);
        
        // Create a recovery letter
        const recoveryLetter = {
          id: Date.now(),
          title: "Credit Dispute Letter",
          recipient: "Credit Bureau",
          bureau: "Experian",
          createdAt: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
          status: 'draft',
          bureaus: ["Experian"],
          content: `
Dear Credit Bureau,

I am writing to dispute information in my credit report. 

Under the Fair Credit Reporting Act (FCRA), you are required to investigate this matter and remove any inaccurate information.

Sincerely,
[YOUR NAME]
          `,
          accountName: "Error Recovery",
          accountNumber: "",
          errorType: "General Dispute",
          letterContent: `
Dear Credit Bureau,

I am writing to dispute information in my credit report. 

Under the Fair Credit Reporting Act (FCRA), you are required to investigate this matter and remove any inaccurate information.

Sincerely,
[YOUR NAME]
          `
        };
        
        // Store the recovery letter
        const letters = [recoveryLetter];
        storeGeneratedLetters(letters);
        
        toast({
          title: "Error Recovery",
          description: "There was an error, but we've created a basic letter for you.",
          variant: "destructive",
        });
        
        // Navigate after a delay
        setTimeout(() => {
          navigate('/dispute-letters');
        }, 800);
      }
    } else {
      toast({
        title: "Error generating letter",
        description: "No report data available. Please try uploading your report again.",
        variant: "destructive"
      });
    }
  };
  
  return (
    <div>
      <div className="flex items-center justify-center gap-2 mb-8">
        <div className="w-12 h-12 rounded-full bg-green-100 dark:bg-green-900/30 flex items-center justify-center">
          <Check className="text-green-600 dark:text-green-400" size={24} />
        </div>
        <h3 className="text-xl font-semibold text-credify-navy dark:text-white">
          Analysis Complete
        </h3>
      </div>
      
      <div className="bg-credify-teal/5 border border-credify-teal/20 rounded-lg p-4 mb-8">
        <div className="flex items-center gap-2 mb-2">
          <FileCheck className="text-credify-teal" size={20} />
          <p className="font-medium text-credify-navy dark:text-white">AI Found {issues.length} Potential {issues.length === 1 ? 'Issue' : 'Issues'}</p>
        </div>
        <p className="text-credify-navy-light dark:text-white/70 text-sm">
          {issues.length > 0 
            ? `Our AI has identified ${issues.length} potential ${issues.length === 1 ? 'issue' : 'issues'} in your credit report that could ${issues.length === 1 ? 'be negatively impacting' : 'negatively impact'} your score. Review the findings below and generate dispute letters.`
            : 'Our AI did not detect any obvious issues in your credit report. However, you may still want to review it carefully for any inaccuracies.'}
        </p>
      </div>
      
      {/* Findings */}
      <div className="space-y-6 mb-8">
        <h3 className="text-lg font-semibold text-credify-navy dark:text-white border-b border-gray-200 dark:border-gray-700/30 pb-2">
          Identified Issues
        </h3>
        
        {issues.length > 0 ? (
          issues.map((issue, index) => (
            <CreditReportIssue
              key={index}
              title={issue.title}
              description={issue.description}
              impact={issue.impact}
              impactColor={issue.impactColor}
              account={issue.account}
              laws={issue.laws}
              onGenerateDispute={() => handleSingleIssueDispute(index, issue.account)}
            />
          ))
        ) : (
          <div className="bg-white dark:bg-credify-navy/40 border border-gray-100 dark:border-gray-700/30 rounded-lg p-5 text-center">
            <p className="text-credify-navy-light dark:text-white/70">
              No issues were detected in your credit report. This could mean your report is accurate or our system couldn't identify any obvious problems.
            </p>
            <p className="text-credify-navy-light dark:text-white/70 mt-2">
              You may still want to review your report manually for any inaccuracies.
            </p>
          </div>
        )}
      </div>
      
      <div className="flex justify-center gap-4">
        <button
          onClick={onResetUpload}
          className="btn-outline flex items-center gap-1"
        >
          <Upload size={18} />
          <span>Upload New Report</span>
        </button>
        
        <button
          onClick={handleGenerateAllLetters}
          className="btn-primary flex items-center gap-1"
        >
          <FileCheck size={18} />
          <span>Generate All Letters</span>
        </button>
      </div>
    </div>
  );
};

export default ReportAnalysisResults;
