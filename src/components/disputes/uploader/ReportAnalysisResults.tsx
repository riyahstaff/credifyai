
import React from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Check, FileCheck, Upload } from 'lucide-react';
import { CreditReportData, CreditReportAccount } from '@/utils/creditReportParser';
import CreditReportIssue from './CreditReportIssue';
import { APP_ROUTES } from '@/lib/supabase';
import { useToast } from '@/hooks/use-toast';
import { generateDisputeLetters, storeGeneratedLetters } from './utils/letterGenerator';

interface ReportAnalysisResultsProps {
  issues: Array<{
    type: string;
    title: string;
    description: string;
    impact: 'High Impact' | 'Critical Impact' | 'Medium Impact';
    impactColor: string;
    account?: CreditReportAccount;
    laws: string[];
  }>;
  reportData: CreditReportData | null;
  onResetUpload: () => void;
  onGenerateDispute: (account?: CreditReportAccount) => void;
}

const ReportAnalysisResults: React.FC<ReportAnalysisResultsProps> = ({
  issues,
  reportData,
  onResetUpload,
  onGenerateDispute
}) => {
  const navigate = useNavigate();
  const { toast } = useToast();
  
  const handleGenerateAllLetters = async () => {
    if (reportData) {
      // Clear any existing letters to prevent confusion
      sessionStorage.removeItem('pendingDisputeLetter');
      sessionStorage.removeItem('generatedDisputeLetters');
      sessionStorage.removeItem('autoGeneratedLetter');
      
      // Store the report data in session storage
      sessionStorage.setItem('creditReportData', JSON.stringify(reportData));
      
      // Show toast
      toast({
        title: "Generating letters",
        description: "Creating dispute letters for all identified issues",
      });
      
      try {
        // Generate letters directly
        console.log("Generating dispute letters for all issues");
        const generatedLetters = await generateDisputeLetters(issues, reportData);
        
        if (generatedLetters && generatedLetters.length > 0) {
          console.log(`Successfully generated ${generatedLetters.length} dispute letters:`);
          
          // Directly store generated letters to ensure they're saved properly
          const storedSuccessfully = storeGeneratedLetters(generatedLetters);
          console.log("Letters stored successfully:", storedSuccessfully);
          
          // Verify storage after storing
          const storedLetters = sessionStorage.getItem('generatedDisputeLetters');
          const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
          const autoFlag = sessionStorage.getItem('autoGeneratedLetter');
          
          console.log("Storage verification:");
          console.log("- Generated letters stored:", !!storedLetters);
          console.log("- Pending letter stored:", !!pendingLetter);
          console.log("- Auto flag set:", autoFlag);
          
          // Force a reload when navigating to ensure the letters page gets fresh data
          sessionStorage.setItem('forceLettersReload', 'true');
          console.log("Navigating to dispute-letters page with reload flag");
          
          // Success toast
          toast({
            title: "Letters Generated",
            description: `${generatedLetters.length} dispute letters have been created and are ready for review.`,
          });
          
          // Navigate after a short delay to ensure storage operations complete
          setTimeout(() => {
            navigate('/dispute-letters');
          }, 200);
        } else {
          console.warn("No letters were generated");
          toast({
            title: "Letter Generation Issue",
            description: "Failed to generate dispute letters. Please try again or contact support.",
            variant: "destructive",
          });
        }
      } catch (error) {
        console.error("Error generating dispute letters:", error);
        toast({
          title: "Letter Generation Error",
          description: "There was an error generating dispute letters. Please try again.",
          variant: "destructive",
        });
      }
    } else {
      toast({
        title: "Error generating letters",
        description: "No report data available. Please try uploading your report again.",
        variant: "destructive"
      });
    }
  };
  
  const handleSingleIssueDispute = async (issueIndex: number, account?: CreditReportAccount) => {
    console.log(`Generating dispute for issue #${issueIndex} with account:`, account);
    
    toast({
      title: "Generating letter",
      description: "Creating dispute letter for selected issue",
    });
    
    if (reportData) {
      try {
        // Clear any existing letters to prevent confusion
        sessionStorage.removeItem('pendingDisputeLetter');
        sessionStorage.removeItem('generatedDisputeLetters');
        sessionStorage.removeItem('autoGeneratedLetter');
        
        // Store the report data
        sessionStorage.setItem('creditReportData', JSON.stringify(reportData));
        
        // Find the specific issue
        const targetIssue = issues[issueIndex];
        if (!targetIssue) {
          throw new Error("Selected issue not found");
        }
        
        console.log("Generating letter for issue:", targetIssue.title);
        const singleIssue = [targetIssue];
        
        // Generate the letter with proper error handling
        const generatedLetters = await generateDisputeLetters(singleIssue, reportData);
        
        if (generatedLetters && generatedLetters.length > 0) {
          console.log("Letter generated successfully:", generatedLetters[0]);
          
          // Directly store the letter
          const storedSuccessfully = storeGeneratedLetters(generatedLetters);
          console.log("Letter stored successfully:", storedSuccessfully);
          
          // Verify storage after storing
          const storedLetters = sessionStorage.getItem('generatedDisputeLetters');
          const pendingLetter = sessionStorage.getItem('pendingDisputeLetter');
          const autoFlag = sessionStorage.getItem('autoGeneratedLetter');
          
          console.log("Storage verification:");
          console.log("- Generated letters stored:", !!storedLetters);
          console.log("- Pending letter stored:", !!pendingLetter);
          console.log("- Auto flag set:", autoFlag);
          
          // Force a reload when navigating
          sessionStorage.setItem('forceLettersReload', 'true');
          
          // Navigate to dispute letters page after a short delay
          toast({
            title: "Letter Generated",
            description: "Your dispute letter has been created and is ready for review.",
          });
          
          setTimeout(() => {
            navigate('/dispute-letters');
          }, 200);
        } else {
          console.warn("Failed to generate letter");
          toast({
            title: "Letter Generation Issue",
            description: "Failed to generate dispute letter. Please try again.",
            variant: "destructive",
          });
        }
      } catch (error) {
        console.error("Error generating single dispute letter:", error);
        
        // Create a simple fallback letter
        const fallbackLetter = {
          id: Date.now(),
          title: `${issues[issueIndex].title} (Emergency Fallback)`,
          bureau: "Experian",
          recipient: "Experian",
          accountName: account?.accountName || "Unknown Account",
          accountNumber: account?.accountNumber || "",
          errorType: issues[issueIndex].title,
          explanation: issues[issueIndex].description,
          letterContent: `
Dear Credit Bureau,

I am writing to dispute the following information in my credit report:

Account Name: ${account?.accountName || "Unknown Account"}
Account Number: ${account?.accountNumber || "Unknown"}
Issue: ${issues[issueIndex].title}

This information is inaccurate because: ${issues[issueIndex].description}

Under the Fair Credit Reporting Act, Section 611, you are required to investigate this matter and correct any inaccurate information.

Sincerely,
[YOUR NAME]
          `,
          content: `
Dear Credit Bureau,

I am writing to dispute the following information in my credit report:

Account Name: ${account?.accountName || "Unknown Account"}
Account Number: ${account?.accountNumber || "Unknown"}
Issue: ${issues[issueIndex].title}

This information is inaccurate because: ${issues[issueIndex].description}

Under the Fair Credit Reporting Act, Section 611, you are required to investigate this matter and correct any inaccurate information.

Sincerely,
[YOUR NAME]
          `,
          status: 'draft',
          createdAt: new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }),
          bureaus: ["Experian"],
          timestamp: new Date().toISOString()
        };
        
        try {
          // Store the fallback letter
          sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(fallbackLetter));
          sessionStorage.setItem('generatedDisputeLetters', JSON.stringify([fallbackLetter]));
          sessionStorage.setItem('autoGeneratedLetter', 'true');
          sessionStorage.setItem('forceLettersReload', 'true');
          
          console.log("Stored fallback letter due to error:", fallbackLetter);
          
          toast({
            title: "Letter Created (Emergency Mode)",
            description: "We encountered an issue but created a basic letter for you to edit.",
          });
          
          setTimeout(() => {
            navigate('/dispute-letters');
          }, 200);
        } catch (storageError) {
          console.error("Storage error with fallback letter:", storageError);
          toast({
            title: "Critical Error",
            description: "Could not create a letter. Please try again or contact support.",
            variant: "destructive",
          });
        }
      }
    } else {
      // If no report data, show an error
      toast({
        title: "Error Generating Letter",
        description: "No report data available. Please try uploading your report again.",
        variant: "destructive"
      });
    }
  };
  
  return (
    <div>
      <div className="flex items-center justify-center gap-2 mb-8">
        <div className="w-12 h-12 rounded-full bg-green-100 dark:bg-green-900/30 flex items-center justify-center">
          <Check className="text-green-600 dark:text-green-400" size={24} />
        </div>
        <h3 className="text-xl font-semibold text-credify-navy dark:text-white">
          Analysis Complete
        </h3>
      </div>
      
      <div className="bg-credify-teal/5 border border-credify-teal/20 rounded-lg p-4 mb-8">
        <div className="flex items-center gap-2 mb-2">
          <FileCheck className="text-credify-teal" size={20} />
          <p className="font-medium text-credify-navy dark:text-white">AI Found {issues.length} Potential {issues.length === 1 ? 'Issue' : 'Issues'}</p>
        </div>
        <p className="text-credify-navy-light dark:text-white/70 text-sm">
          {issues.length > 0 
            ? `Our AI has identified ${issues.length} potential ${issues.length === 1 ? 'issue' : 'issues'} in your credit report that could ${issues.length === 1 ? 'be negatively impacting' : 'negatively impact'} your score. Review the findings below and generate dispute letters.`
            : 'Our AI did not detect any obvious issues in your credit report. However, you may still want to review it carefully for any inaccuracies.'}
        </p>
      </div>
      
      {/* Findings */}
      <div className="space-y-6 mb-8">
        <h3 className="text-lg font-semibold text-credify-navy dark:text-white border-b border-gray-200 dark:border-gray-700/30 pb-2">
          Identified Issues
        </h3>
        
        {issues.length > 0 ? (
          issues.map((issue, index) => (
            <CreditReportIssue
              key={index}
              title={issue.title}
              description={issue.description}
              impact={issue.impact}
              impactColor={issue.impactColor}
              account={issue.account}
              laws={issue.laws}
              onGenerateDispute={() => handleSingleIssueDispute(index, issue.account)}
            />
          ))
        ) : (
          <div className="bg-white dark:bg-credify-navy/40 border border-gray-100 dark:border-gray-700/30 rounded-lg p-5 text-center">
            <p className="text-credify-navy-light dark:text-white/70">
              No issues were detected in your credit report. This could mean your report is accurate or our system couldn't identify any obvious problems.
            </p>
            <p className="text-credify-navy-light dark:text-white/70 mt-2">
              You may still want to review your report manually for any inaccuracies.
            </p>
          </div>
        )}
      </div>
      
      <div className="flex justify-center gap-4">
        <button
          onClick={onResetUpload}
          className="btn-outline flex items-center gap-1"
        >
          <Upload size={18} />
          <span>Upload New Report</span>
        </button>
        
        <button
          onClick={handleGenerateAllLetters}
          className="btn-primary flex items-center gap-1"
        >
          <FileCheck size={18} />
          <span>Generate All Letters</span>
        </button>
      </div>
    </div>
  );
};

export default ReportAnalysisResults;
