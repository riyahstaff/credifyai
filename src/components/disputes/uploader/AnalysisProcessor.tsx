
import { useToast } from '@/hooks/use-toast';
import { processCreditReport, CreditReportData, CreditReportAccount } from '@/utils/creditReportParser';
import { identifyIssues, enhanceReportData } from '@/utils/reportAnalysis';
import { generateEnhancedDisputeLetter } from '@/lib/supabase/letterGenerator';

export interface AnalysisProcessorProps {
  uploadedFile: File | null;
  setReportData: (data: CreditReportData) => void;
  setIssues: (issues: Array<{
    type: string;
    title: string;
    description: string;
    impact: 'High Impact' | 'Critical Impact' | 'Medium Impact';
    impactColor: string;
    account?: CreditReportAccount;
    laws: string[];
  }>) => void;
  setLetterGenerated: (generated: boolean) => void;
  setAnalysisError: (error: string | null) => void;
  setAnalyzing: (analyzing: boolean) => void;
  setAnalyzed: (analyzed: boolean) => void;
}

export const handleAnalysisComplete = async ({
  uploadedFile,
  setReportData,
  setIssues,
  setLetterGenerated,
  setAnalysisError,
  setAnalyzing,
  setAnalyzed,
  toast
}: AnalysisProcessorProps & { toast: ReturnType<typeof useToast> }) => {
  console.log("handleAnalysisComplete called");
  
  // Immediately set to not analyzing to ensure the UI progresses
  setAnalyzing(false);
  setAnalyzed(true);
  
  try {
    if (!uploadedFile) {
      console.error("No file available for analysis");
      setAnalysisError("No file was available for analysis");
      return;
    }
    
    console.log("Processing credit report:", uploadedFile.name);
    const data = await processCreditReport(uploadedFile);
    
    console.log("Enhancing report data");
    const enhancedData = enhanceReportData(data);
    setReportData(enhancedData);
    
    console.log("Identifying issues in report data");
    const detectedIssues = identifyIssues(enhancedData);
    setIssues(detectedIssues);
    
    // Force generate a dispute letter even if no issues are found
    if (enhancedData) {
      // Store the report data in session storage
      sessionStorage.setItem('creditReportData', JSON.stringify(enhancedData));
      
      // Find an issue to dispute, or create a generic one
      let issueToDispute;
      if (detectedIssues.length > 0) {
        // Find highest impact issues first
        const criticalIssues = detectedIssues.filter(issue => 
          issue.impact === 'Critical Impact' || issue.impact === 'High Impact'
        );
        
        issueToDispute = criticalIssues.length > 0 ? criticalIssues[0] : detectedIssues[0];
      } else {
        // Create a generic issue if none were found
        issueToDispute = {
          type: "general",
          title: "Potential Inaccuracies",
          description: "I am disputing information in my credit report that may contain inaccuracies or errors requiring investigation.",
          impact: "Medium Impact" as const,
          impactColor: "orange",
          laws: ["FCRA ยง 611"]
        };
      }
      
      const bureauName = issueToDispute.account?.bureau || "Experian";
      const accountName = issueToDispute.account?.accountName || "Identified Account";
      const accountNumber = issueToDispute.account?.accountNumber;
      
      // Get user info from local storage or use placeholder
      const userInfo = {
        name: localStorage.getItem('userName') || "[YOUR NAME]",
        address: localStorage.getItem('userAddress') || "[YOUR ADDRESS]",
        city: localStorage.getItem('userCity') || "[CITY]",
        state: localStorage.getItem('userState') || "[STATE]",
        zip: localStorage.getItem('userZip') || "[ZIP]"
      };
      
      try {
        // Generate letter automatically
        console.log("Generating dispute letter for:", accountName);
        const letterContent = await generateEnhancedDisputeLetter(
          issueToDispute.title,
          {
            accountName: accountName,
            accountNumber: accountNumber,
            errorDescription: issueToDispute.description,
            bureau: bureauName
          },
          userInfo
        );
        
        // Store the letter data to create it in the letter page
        const disputeData = {
          bureau: bureauName,
          accountName: accountName,
          accountNumber: accountNumber,
          errorType: issueToDispute.title,
          explanation: issueToDispute.description,
          creditReport: enhancedData,
          letterContent: letterContent,
          timestamp: new Date()
        };
        
        // Store dispute data in session storage to create the letter when navigating
        sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(disputeData));
        
        // Set letter generated flag
        setLetterGenerated(true);
        
        // Set a flag to indicate a letter has been generated and is ready
        sessionStorage.setItem('autoGeneratedLetter', 'true');
        
        console.log("Letter generation complete, letter data stored in session storage");
        
        // Show success toast for letter generation
        toast.toast({
          title: "Dispute letter generated",
          description: `A dispute letter has been created for ${accountName}.`,
        });
      } catch (error) {
        console.error("Error auto-generating dispute letter:", error);
        setAnalysisError("Failed to generate dispute letter. Please try manually creating one.");
      }
    }
    
    // Show success toast
    toast.toast({
      title: "Analysis complete",
      description: `Found ${detectedIssues.length} potential issues in your credit report.`,
    });
    
  } catch (error) {
    console.error("Error analyzing report:", error);
    setAnalysisError(error instanceof Error ? error.message : "Unknown error processing report");
    toast.toast({
      title: "Analysis failed",
      description: error instanceof Error ? error.message : "Failed to process your credit report.",
      variant: "destructive",
    });
  }
};
