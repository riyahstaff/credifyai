
import { useToast } from '@/hooks/use-toast';
import { processCreditReport } from '@/utils/creditReportParser';
import { identifyIssues, enhanceReportData } from '@/utils/reportAnalysis';
import { loadSampleDisputeLetters } from '@/utils/creditReport/disputeLetters/sampleLettersLoader';
import { loadSampleReports } from '@/utils/creditReport/sampleReports';
import { AnalysisProcessorProps, AnalysisHandlerProps } from './types/analysisTypes';
import { ensureMinimumIssues } from './utils/issueGenerator';
import { generateDisputeLetters, storeGeneratedLetters } from './utils/letterGenerator';
import { storeReportData } from './utils/reportStorage';

export type { AnalysisProcessorProps } from './types/analysisTypes';

export const handleAnalysisComplete = async ({
  uploadedFile,
  setReportData,
  setIssues,
  setLetterGenerated,
  setAnalysisError,
  setAnalyzing,
  setAnalyzed,
  toast
}: AnalysisHandlerProps) => {
  console.log("handleAnalysisComplete called");
  
  try {
    setAnalyzing(true);
    
    if (!uploadedFile) {
      console.error("No file available for analysis");
      setAnalysisError("No file was available for analysis");
      setAnalyzing(false);
      setAnalyzed(true);
      return;
    }
    
    // Process the credit report
    console.log("Processing credit report:", uploadedFile.name);
    const data = await processCreditReport(uploadedFile);
    
    if (!data) {
      throw new Error("Failed to process credit report data");
    }
    
    // Store the report data
    setReportData(data);
    storeReportData(data);
    
    // Identify issues in the report
    console.log("Identifying issues in report data");
    let detectedIssues = identifyIssues(data);
    detectedIssues = ensureMinimumIssues(detectedIssues, 3);
    
    console.log(`Found ${detectedIssues.length} potential issues:`, detectedIssues);
    setIssues(detectedIssues);
    
    // Generate dispute letters
    console.log(`Generating dispute letters for ${detectedIssues.length} issues`);
    const generatedLetters = await generateDisputeLetters(detectedIssues, data);
    
    if (generatedLetters && generatedLetters.length > 0) {
      console.log(`Generated ${generatedLetters.length} dispute letters successfully`);
      setLetterGenerated(true);
      sessionStorage.setItem('autoGeneratedLetter', 'true');
      
      toast.toast({
        title: "Dispute letters generated",
        description: `${generatedLetters.length} dispute letters have been created and are ready for review.`,
      });
    } else {
      console.warn("No letters were generated");
      
      // Create a fallback letter if no letters were generated
      const fallbackLetter = createFallbackLetter(data);
      storeGeneratedLetters([fallbackLetter]);
      setLetterGenerated(true);
      
      toast.toast({
        title: "Fallback dispute letter generated",
        description: "We created a basic dispute letter since we couldn't generate specific letters for the issues found.",
      });
    }
    
    setAnalyzing(false);
    setAnalyzed(true);
    
    // Force navigation by logging this special message 
    console.log("ANALYSIS_COMPLETE_READY_FOR_NAVIGATION");
    
  } catch (error) {
    console.error("Error analyzing report:", error);
    setAnalysisError(error instanceof Error ? error.message : "Unknown error processing report");
    setAnalyzing(false);
    setAnalyzed(true);
    
    toast.toast({
      title: "Analysis failed",
      description: error instanceof Error ? error.message : "Failed to process your credit report.",
      variant: "destructive",
    });
  }
};

/**
 * Create a fallback dispute letter when no issues can be processed
 */
const createFallbackLetter = (reportData?: any) => {
  // Include accounts from the report if available
  const accounts = reportData?.accounts || [];
  
  // Format account information
  let accountsSection = '';
  if (accounts && accounts.length > 0) {
    accountsSection = accounts.map((account: any, index: number) => {
      const accountName = account.accountName || 'UNKNOWN CREDITOR';
      const accountNumber = account.accountNumber || '';
      const maskedNumber = accountNumber ? 'xxxxxxxx' + accountNumber.substring(Math.max(0, accountNumber.length - 4)) : 'xxxxxxxx####';
      
      return `
Alleging Creditor#${index + 1} and Account #${index + 1} as is reported on my credit report:
${accountName.toUpperCase()}
ACCOUNT- ${maskedNumber}
Notation: Per CRSA enacted, CDIA implemented laws, any and all reporting must be deleted if not Proven CERTIFIABLY fully true, correct, complete, timely, of known ownership and responsibility but also fully Metro 2 compliant`;
    }).join('\n');
  }
  
  return {
    bureau: "Experian",
    accountName: "All Accounts",
    accountNumber: "",
    errorType: "General Dispute",
    explanation: "I am disputing all information in my credit report that may be inaccurate or incomplete under my rights provided by the Fair Credit Reporting Act.",
    accounts: accounts,
    letterContent: `
[YOUR NAME]
[YOUR ADDRESS]
[CITY, STATE ZIP]
[DATE]

Re: My certified letter in notice of an official consumer declaration of complaint for your thus far NOT proven true, NOT proven correct, NOT proven complete, NOT proven timely, or NOT proven compliant mis-information, to include likely the deficient of proven metro 2 compliant data field formatted reporting as MANDATED! I am enacting my consumer and or civil rights to compel you here and now to absolutely and permanently remove any and all aspects of untrue, inaccurate, not complete, not timely, not proven mine, not proven my responsibility, and or not proven adequately and entirely compliant allegations of credit information.

Experian
P.O. Box 4500
Allen, TX 75013

To Whom It May Concern:

I received a copy of my credit report and found the following item(s) to be errors, or are deficient of proof of not being untrue, incorrect, incomplete, untimely, not mine, not my responsibility, or else wise not compliant, to include to metro 2 reporting standards.

Here as follows are items in potential error requiring immediate annulment of the retainment and or reporting:
${accountsSection}

I am writing to dispute inaccurate information in my credit report. I have the right under the Fair Credit Reporting Act (FCRA), Section 611, to dispute incomplete or inaccurate information.

After reviewing my credit report, I have identified multiple items that I believe are inaccurate and request that they be verified and corrected.

I request that all items in my credit report be verified for accuracy. If any information cannot be fully verified, it must be removed from my credit report as required by the FCRA.

Please investigate these matters and correct my credit report accordingly.

Sincerely,

[YOUR NAME]
    `,
    timestamp: new Date().toISOString()
  };
};

/**
 * Preload sample data to assist with analysis
 */
const preloadSampleData = async () => {
  console.log("Preloading sample dispute letters and reports");
  
  try {
    // Load sample dispute letters with a timeout to prevent hanging
    const letterPromise = Promise.race([
      loadSampleDisputeLetters(),
      new Promise<any[]>((_, reject) => setTimeout(() => reject(new Error("Timeout loading sample letters")), 3000))
    ]);
    
    // Load sample reports with a timeout to prevent hanging
    const reportsPromise = Promise.race([
      loadSampleReports(),
      new Promise<any[]>((_, reject) => setTimeout(() => reject(new Error("Timeout loading sample reports")), 3000))
    ]);
    
    const [sampleDisputeLetters, sampleReports] = await Promise.allSettled([letterPromise, reportsPromise]);
    
    // Safely check the length with type guards
    const lettersLength = sampleDisputeLetters.status === 'fulfilled' && Array.isArray(sampleDisputeLetters.value) 
      ? sampleDisputeLetters.value.length 
      : 0;
      
    const reportsLength = sampleReports.status === 'fulfilled' && Array.isArray(sampleReports.value) 
      ? sampleReports.value.length 
      : 0;
    
    console.log(`Loaded ${lettersLength} sample dispute letters`);
    console.log(`Loaded ${reportsLength} sample credit reports`);
  } catch (error) {
    console.warn("Error in preloadSampleData, continuing anyway:", error);
  }
};
