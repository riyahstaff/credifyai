
import { useToast } from '@/hooks/use-toast';
import { processCreditReport } from '@/utils/creditReportParser';
import { identifyIssues, enhanceReportData } from '@/utils/reportAnalysis';
import { loadSampleDisputeLetters } from '@/utils/creditReport/disputeLetters/sampleLettersLoader';
import { loadSampleReports } from '@/utils/creditReport/sampleReports';
import { AnalysisProcessorProps, AnalysisHandlerProps } from './types/analysisTypes';
import { ensureMinimumIssues } from './utils/issueGenerator';
import { generateDisputeLetters, storeGeneratedLetters } from './utils/letterGenerator';
import { storeReportData } from './utils/reportStorage';

// Use 'export type' instead of just 'export' for re-exporting types
export type { AnalysisProcessorProps } from './types/analysisTypes';

export const handleAnalysisComplete = async ({
  uploadedFile,
  setReportData,
  setIssues,
  setLetterGenerated,
  setAnalysisError,
  setAnalyzing,
  setAnalyzed,
  toast
}: AnalysisHandlerProps) => {
  console.log("handleAnalysisComplete called");
  
  try {
    setAnalyzing(true);
    
    if (!uploadedFile) {
      console.error("No file available for analysis");
      setAnalysisError("No file was available for analysis");
      setAnalyzing(false);
      setAnalyzed(true);
      return;
    }
    
    // Preload sample data
    try {
      await preloadSampleData();
    } catch (error) {
      console.warn("Error preloading sample data, continuing anyway:", error);
    }
    
    // Process the credit report
    console.log("Processing credit report:", uploadedFile.name);
    const data = await processCreditReport(uploadedFile);
    
    if (!data) {
      throw new Error("Failed to process credit report data");
    }
    
    // Enhance the data with additional context
    console.log("Enhancing report data");
    const enhancedData = enhanceReportData(data);
    setReportData(enhancedData);
    
    // Identify issues in the report
    console.log("Identifying issues in report data");
    let detectedIssues = identifyIssues(enhancedData);
    
    // Ensure we have at least 3 issues to present to the user
    detectedIssues = ensureMinimumIssues(detectedIssues, 3);
    
    console.log(`Found ${detectedIssues.length} potential issues:`, detectedIssues);
    setIssues(detectedIssues);
    
    // Store the report data in session storage
    if (enhancedData) {
      storeReportData(enhancedData);
      
      // Generate dispute letters - always generate at least one letter
      console.log(`Generating dispute letters for ${detectedIssues.length} issues`);
      let generatedLetters = await generateDisputeLetters(detectedIssues, enhancedData);
      
      // If no letters were generated, force generation of a fallback letter
      if (!generatedLetters || generatedLetters.length === 0) {
        console.warn("No letters generated, creating fallback letter");
        generatedLetters = [createFallbackLetter(enhancedData)];
      }
      
      // Store the generated letters
      const lettersStored = storeGeneratedLetters(generatedLetters);
      
      if (lettersStored) {
        setLetterGenerated(true);
        
        toast.toast({
          title: "Dispute letters generated",
          description: `${generatedLetters.length} dispute letters have been created and are ready for review.`,
        });
      } else {
        console.warn("Failed to store letters, but will continue with first letter");
        // Even if storing all letters fails, try to store at least the first one
        try {
          const firstLetter = generatedLetters[0];
          sessionStorage.setItem('pendingDisputeLetter', JSON.stringify(firstLetter));
          sessionStorage.setItem('autoGeneratedLetter', 'true');
          setLetterGenerated(true);
        } catch (storageError) {
          setAnalysisError("Generated letters are too large for browser storage. Please try generating individual letters.");
          
          toast.toast({
            title: "Storage error",
            description: "Letters were generated but couldn't be stored due to browser limitations.",
            variant: "destructive",
          });
        }
      }
    }
    
    toast.toast({
      title: "Analysis complete",
      description: `Found ${detectedIssues.length} potential issues in your credit report.`,
    });
    
    setAnalyzing(false);
    setAnalyzed(true);
    
  } catch (error) {
    console.error("Error analyzing report:", error);
    setAnalysisError(error instanceof Error ? error.message : "Unknown error processing report");
    setAnalyzing(false);
    setAnalyzed(true);
    
    toast.toast({
      title: "Analysis failed",
      description: error instanceof Error ? error.message : "Failed to process your credit report.",
      variant: "destructive",
    });
  }
};

/**
 * Create a fallback dispute letter when no issues can be processed
 */
const createFallbackLetter = (reportData?: any) => {
  // Include accounts from the report if available
  const accounts = reportData?.accounts || [];
  
  return {
    bureau: "Experian",
    accountName: "All Accounts",
    accountNumber: "",
    errorType: "General Dispute",
    explanation: "I am disputing all information in my credit report that may be inaccurate or incomplete under my rights provided by the Fair Credit Reporting Act.",
    accounts: accounts,
    letterContent: `
[YOUR NAME]
[YOUR ADDRESS]
[CITY, STATE ZIP]
[DATE]

Experian
P.O. Box 4500
Allen, TX 75013

RE: Dispute of Inaccurate Credit Information

To Whom It May Concern:

I am writing to dispute inaccurate information in my credit report. I have the right under the Fair Credit Reporting Act (FCRA), Section 611, to dispute incomplete or inaccurate information.

After reviewing my credit report, I have identified multiple items that I believe are inaccurate and request that they be verified and corrected.

I request that all items in my credit report be verified for accuracy. If any information cannot be fully verified, it must be removed from my credit report as required by the FCRA.

Please investigate these matters and correct my credit report accordingly.

Sincerely,

[YOUR NAME]
    `,
    timestamp: new Date().toISOString()
  };
};

/**
 * Preload sample data to assist with analysis
 */
const preloadSampleData = async () => {
  console.log("Preloading sample dispute letters and reports");
  
  try {
    // Load sample dispute letters with a timeout to prevent hanging
    const letterPromise = Promise.race([
      loadSampleDisputeLetters(),
      new Promise<any[]>((_, reject) => setTimeout(() => reject(new Error("Timeout loading sample letters")), 3000))
    ]);
    
    // Load sample reports with a timeout to prevent hanging
    const reportsPromise = Promise.race([
      loadSampleReports(),
      new Promise<any[]>((_, reject) => setTimeout(() => reject(new Error("Timeout loading sample reports")), 3000))
    ]);
    
    const [sampleDisputeLetters, sampleReports] = await Promise.allSettled([letterPromise, reportsPromise]);
    
    // Safely check the length with type guards
    const lettersLength = sampleDisputeLetters.status === 'fulfilled' && Array.isArray(sampleDisputeLetters.value) 
      ? sampleDisputeLetters.value.length 
      : 0;
      
    const reportsLength = sampleReports.status === 'fulfilled' && Array.isArray(sampleReports.value) 
      ? sampleReports.value.length 
      : 0;
    
    console.log(`Loaded ${lettersLength} sample dispute letters`);
    console.log(`Loaded ${reportsLength} sample credit reports`);
  } catch (error) {
    console.warn("Error in preloadSampleData, continuing anyway:", error);
  }
};
